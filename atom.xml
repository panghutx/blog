<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胖虎同学</title>
  
  <subtitle>生活学习类个人博客</subtitle>
  <link href="https://youngsay.cn/atom.xml" rel="self"/>
  
  <link href="https://youngsay.cn/"/>
  <updated>2022-04-09T13:28:25.964Z</updated>
  <id>https://youngsay.cn/</id>
  
  <author>
    <name>胖虎同学</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态内存分配基本使用及常见问题</title>
    <link href="https://youngsay.cn/2022/04/09/C-malloc/"/>
    <id>https://youngsay.cn/2022/04/09/C-malloc/</id>
    <published>2022-04-09T13:23:41.000Z</published>
    <updated>2022-04-09T13:28:25.964Z</updated>
    
    <content type="html"><![CDATA[<p>为什么需要动态内存管理？创建一个数组，我们要为数组指定大小，<code>int arr[10];</code>，这属于静态创建一个数组，数组arr存放在栈上。这样的创建方式有一些局限性，小了呢不够用，大了呢又浪费空间，因此要引入动态内存管理。</p><p>动态创建一个数组，不再受元素个数的限制，当元素个数与容量相等时，可以很方便地扩容。</p><p>如何动态内存管理，我们来介绍几个函数。</p><p><strong><code>malloc</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void* malloc (size_t size);</span><br></pre></td></tr></table></figure><p>参数size为要为空间开辟的字节数，开辟成功后返回值为该空间的首地址，失败则返回<code>NULL</code>.<strong>当size为0时，要看编译器如何处理，具体返回什么不确定</strong>。</p><p>动态开辟内存后，不需要再使用这块空间时，要使用<code>free</code>函数释放内存。，否则会内存泄漏。free释放后这块内存可以再次被分配，但被释放的空间的值没有被改变，它仍然指向相同（无效）的位置。</p><p><code>free</code>专门用来释放动态分配的空间，如果空间为空，不执行任何操作。切记不可以用free来释放静态分配的内存空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* p =(<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">40</span>); <span class="comment">//动态开辟10字节的空间</span></span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123; <span class="comment">//判断是否开辟成功</span></span><br><span class="line">perror(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">*(p + i) = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(p + i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p); <span class="comment">//释放p空间</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>calloc</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void* calloc (size_t num, size_t size);</span><br></pre></td></tr></table></figure><p>与<code>malloc</code>相似，但是会在开辟后为空间初始化为0.参数num为要分配的元素数，size为每个元素的大小，总的内存空间为num*size个字节。</p><p>与malloc用法一致，不在举例。</p><p><strong><code>realloc</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void* realloc (void* ptr, size_t size);</span><br></pre></td></tr></table></figure><p>该函数可以为动态空间扩容，参数ptr为要扩容的空间，size为扩容后的内存大小。</p><p>扩容成功返回该空间的首地址，失败返回空，所以为空间扩容时先创建一块临时变量指向该空间，为临时变量扩容，扩容成功再让要扩容的空间等于临时变量，以防扩容失败内容丢失。</p><p>扩容会遇到两种情况，1种是该块空间后没有额外的空间来扩容，这时会分配一块新空间，将旧空间的内容移到新空间，返回值自然也是新空间的首地址，2是该块空间空间充足，这就可以在该空间后连续扩容，无需再寻找新的空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">40</span>); <span class="comment">//动态开辟10字节的空间</span></span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123; <span class="comment">//判断是否开辟成功</span></span><br><span class="line">perror(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">*(p + i) = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(p + i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//扩容</span></span><br><span class="line"><span class="keyword">int</span>* tmp=(<span class="keyword">int</span>*)<span class="built_in">realloc</span>(p, <span class="number">80</span>);</span><br><span class="line"><span class="keyword">if</span> (tmp != <span class="literal">NULL</span>) &#123; <span class="comment">//判断是否扩容成功</span></span><br><span class="line">p = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">*(p + i) = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(p + i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为0~19，扩容成功。</p><p><strong>问题</strong></p><p>了解了动态内存分配函数的一些基础使用后，我们来看一些常见的问题。</p><p>代码1:这段代码有什么问题？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetMemory</span><span class="params">(<span class="keyword">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">GetMemory(str);</span><br><span class="line"><span class="built_in">strcpy</span>(str, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p是一个局部变量，是实参的一份临时拷贝，出了GetMemory函数会自动销毁。我们为p开辟了100个字节的空间，出了函数后p销毁，找不到这块空间的首地址，却没对该空间进行内存释放，会造成内存泄漏。</p><p>此外str仍是空指针，将“hello world”拷贝到一块空指针，会造成非法访问，程序崩溃。</p><p>我们可以试着修改，将传值调用改成传址调用，这样p和str指向了同一块空间，最后别忘了free释放内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetMemory</span><span class="params">(<span class="keyword">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">GetMemory(&amp;str); <span class="comment">//传地址</span></span><br><span class="line"><span class="built_in">strcpy</span>(str, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(str);</span><br><span class="line"><span class="built_in">free</span>(str); <span class="comment">//别忘了释放哦~</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">GetMemory</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> p[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">str = GetMemory();</span><br><span class="line"><span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p是一个局部变量，是实参的一份临时拷贝，<code>return p</code>返回的是局部变量p的首地址，str收到了这个地址。不巧的是出了GetMemory函数p这块地址就还给了操作系统，所以str找不到这块地址，造成了野指针。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为什么需要动态内存管理？创建一个数组，我们要为数组指定大小，&lt;code&gt;int arr[10];&lt;/code&gt;，这属于静态创建一个数组，数组arr存放在栈上。这样的创建方式有一些局限性，小了呢不够用，大了呢又浪费空间，因此要引入动态内存管理。&lt;/p&gt;
&lt;p&gt;动态创建一个数组</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="c" scheme="https://youngsay.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C语言的结构体及内存对齐</title>
    <link href="https://youngsay.cn/2022/03/31/C-struct/"/>
    <id>https://youngsay.cn/2022/03/31/C-struct/</id>
    <published>2022-03-31T11:00:41.000Z</published>
    <updated>2022-04-02T01:47:15.144Z</updated>
    
    <content type="html"><![CDATA[<h4 id="结构体基础">结构体基础</h4><p>结构体就是一些成员的集合，结构体的每一个成员可以是整型、数组、指针、结构体等不同的类型。</p><p>下面是一个简单的结构体结构，包含了类型声明<code>struct Stu</code>、成员、结构体变量<code>s1</code>的声明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> &#123;</span>  <span class="comment">//类型</span></span><br><span class="line"><span class="comment">//成员</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">char</span> sex[<span class="number">10</span>];</span><br><span class="line">&#125;s1; <span class="comment">//结构体变量</span></span><br></pre></td></tr></table></figure><p>我们可以像上面那样声明一个结构体变量，也可以像下面这样单独声明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s2</span>;</span></span><br></pre></td></tr></table></figure><p><code>struct</code>是结构体关键字，<code>Stu</code>是结构体标志，两者构成了结构体类型。上面的语句表示为<code>struct Stu</code>类型的结构体声明了一个变量<code>s1</code>。下面是对s1的赋值操作，可以在声明结构体变量的时候直接赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s1</span> =</span> &#123; <span class="string">&quot;panghutx&quot;</span>,<span class="number">20</span>,<span class="string">&quot;male&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p>在声明结构体时，我们可以对结构体不完全声明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">double</span> c; </span><br><span class="line">&#125; a;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">double</span> c; </span><br><span class="line">&#125; *P;</span><br></pre></td></tr></table></figure><p>以上就不完全声明了两个结构体，我们称之为匿名结构体类型。结构体变量a和*p具有相同的成员，但它们是两个完全不同的类型。当我们尝试如下代码时，会出现警告。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*p = &amp;a;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b7bee360471b4eafa7f55e39e249a0f2.png#pic_center" alt="警告信息"></p><p>说到结构体，我们难免提到一个关键字<code>typedef</code>,用于定义新的类型（或类型重命名）。我们在学习链表时可能会看到这样的结构，下面这段代码是对<code>struct Node</code>重命名为<code>Node</code>.而且还在结构体中引用了自己。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">Node* next;</span><br><span class="line">&#125;Node;</span><br></pre></td></tr></table></figure><p>切记在结构体自引用时不要使用匿名结构体，否则就是在定义新类型的时候引用了新类型，这是错误的。</p><p>再看下面的写法，定义了两个新类型，<code>Node</code>和<code>*pNode</code>，Node我们已经知道是对<code>struct Node</code>进行重命名，而<code>*pNode</code>是对<code>struct Node*</code>的重命名。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">Node* next;</span><br><span class="line">&#125;Node,*pNode;</span><br></pre></td></tr></table></figure><h4 id="结构体内存对齐">结构体内存对齐</h4><p>结构体的大小不是单纯的各元素相加，因为主流计算机使用的是32bit字长的CPU，那么取4个字节数要比1个高效，所以结构体存在内存对齐。每个编译器都有自己的对齐系数，程序员也可以通过预编译命令来改变默认对齐数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(n) <span class="comment">//n为修改的对齐系数</span></span></span><br></pre></td></tr></table></figure><p>对齐规则：</p><p>①首个成员放在0ffset（偏移量）为0的位置，其他成员变量要对齐到某个数字（对齐数）的整数倍的地址处。</p><p><code>对齐数</code> = 编译器默认的一个对齐数 与 该成员大小的较小值。</p><p>②结构体总大小为各元素最大对齐数的整数倍。</p><p>举个例子，计算下面结构体的大小是多少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> c1;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> c2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>假设编译环境默认4字节对齐。</p><p>c1是结构体首个元素，直接放到偏移量为0的位置，占1个字节；i自身大小为4字节，默认对齐4字节，因此对齐数就是四字节，将其放到对齐数整数倍的位置，也就是4偏移量的位置。c2自身大小1字节，默认对齐数4，因此对齐数是1，将其放到对齐数整数倍的位置，也就是int的后面。</p><p>0~8偏移量，那么该结构体为9个字节，对吗？别忘了规则②，结构体总大小是各元素最大对齐数的整数倍。结构体内最大对齐数的元素是int，对齐数是4，9不是4的整数倍，再开辟3个字节。</p><p>综上该结构体大小为12字节。</p><p><img src="https://img-blog.csdnimg.cn/21c2a08f1fb84c2f9084b2342fd99e9f.png#pic_center" alt="结构体内存对齐"></p><h4 id="结构体位段">结构体位段</h4><p>c语言允许在一个结构体中以位为单位来指定成员长度，利用位段能够节约空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> _a:<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> _b:<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> _c:<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> _d:<span class="number">30</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>A就是1个位段，它的大小为8个字节，想知道为什么是8个字节，要知道它的内存分配。</p><ul><li>位段的成员可以是 <code>int</code> <code>unsigned int</code> <code>signed int </code>或者是<code> char</code> （属于整形家族）类型</li><li>位段的空间上是按照需要以4个字节（ int ）或者1个字节（ char ）的方式来开辟的。</li><li>位段涉及很多不确定因素，位段是不跨平台的，注重可移植的程序应该避免使用位段</li></ul><p>调试下面代码，我们可以看一下空间是如何开辟的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> a:<span class="number">3</span>;</span><br><span class="line"><span class="keyword">char</span> b:<span class="number">4</span>;</span><br><span class="line"><span class="keyword">char</span> c:<span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> d:<span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">s.a = <span class="number">10</span>;</span><br><span class="line">s.b = <span class="number">12</span>;</span><br><span class="line">s.c = <span class="number">3</span>;</span><br><span class="line">s.d = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/63a14cb112be407c8b35ecec11f5fc5d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6I-c6bif5bCP6IOWcA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="位段内存分配"></p><p>我在vs2019环境下调试，和vs2013结果一样。先开辟一字节，从低位开始存数据，存不下时舍弃剩余位，再开辟一字节空间。</p><p>以上存储方式只能代表vs环境下，其他环境不确定。要知道，位段的内存分配与内存对齐的实现方式依赖于具体的机器和系统，在不同的平台可能有不同的结果，这导致了位段在本质上是不可移植的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;结构体基础&quot;&gt;结构体基础&lt;/h4&gt;
&lt;p&gt;结构体就是一些成员的集合，结构体的每一个成员可以是整型、数组、指针、结构体等不同的类型。&lt;/p&gt;
&lt;p&gt;下面是一个简单的结构体结构，包含了类型声明&lt;code&gt;struct Stu&lt;/code&gt;、成员、结构体变量&lt;code&gt;</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="c" scheme="https://youngsay.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>博客一周年啦</title>
    <link href="https://youngsay.cn/2022/03/29/anniversary1/"/>
    <id>https://youngsay.cn/2022/03/29/anniversary1/</id>
    <published>2022-03-29T15:31:01.000Z</published>
    <updated>2022-03-31T11:45:01.103Z</updated>
    
    <content type="html"><![CDATA[<p>今天是3月29日，博客第一篇博文是在去年3月29日，不知不觉博客已经一年了。</p><p>一年前的今天，是大一下返校的前一天，今天，是大二下开学的第五周，一年后的今天，是大三下，不知道是在准备考研还是忙着就业。</p><p>一年后的事，一年后再说，活在当下，珍惜现在。突如其来的疫情已经持续三年了，都忘了没有疫情的生活是啥样了，三年多少人因为疫情失去了生命。上周让人悲痛的客机坠毁事件，航班人员全部遇难，向遇难者默哀。真是不知道明天和意外哪个会先来，生命无常，活着就好。</p><p>今天早上腾讯云连发了多条消息，原来是学生机和域名都快过期了。学生机是1核2G，每年108，我也不打算续费了。昨天看了橙梓的服务器迁移计划，我又心动了，今天买了五年2核2G4M的服务器，330元，我用处不大，只是觉得挺便宜的，下次续费就是2027年了，这下不用担心到期了。</p><p>下午忙活半天把hexo部署到了服务器，这下速度应该快了些，博客至少还能再活五年。五年后，我要发篇博客:博客五周年啦!</p><p>五年后的事，五年后再说吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天是3月29日，博客第一篇博文是在去年3月29日，不知不觉博客已经一年了。&lt;/p&gt;
&lt;p&gt;一年前的今天，是大一下返校的前一天，今天，是大二下开学的第五周，一年后的今天，是大三下，不知道是在准备考研还是忙着就业。&lt;/p&gt;
&lt;p&gt;一年后的事，一年后再说，活在当下，珍惜现在。突</summary>
      
    
    
    
    <category term="日常" scheme="https://youngsay.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="感悟" scheme="https://youngsay.cn/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>常用的字符串处理函数</title>
    <link href="https://youngsay.cn/2022/03/28/C-string/"/>
    <id>https://youngsay.cn/2022/03/28/C-string/</id>
    <published>2022-03-28T08:31:01.000Z</published>
    <updated>2022-03-28T08:42:48.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串处理类">字符串处理类</h2><h3 id="strlen"><code>strlen</code></h3><h4 id="简单介绍">简单介绍</h4><p><code>size_t strlen ( const char * str );</code></p><p>Geting string length.</p><p>参数：str，返回值：字符串长度</p><p>字符串以<code>\0</code>作为结束标志，返回<code>\0</code>之前的字符个数。返回值是<code>size_t</code>（无符号）。</p><h4 id="模拟实现">模拟实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1：计时器</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">My_strlen1</span><span class="params">(<span class="keyword">char</span>* ps)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*ps) &#123;</span><br><span class="line">count++;</span><br><span class="line">ps++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法2：指针相减</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">My_strlen2</span><span class="params">(<span class="keyword">char</span>* ps)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span>* start = ps;</span><br><span class="line"><span class="keyword">while</span> (*ps) &#123;</span><br><span class="line">ps++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ps - start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法3：递归</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">My_strlen3</span><span class="params">(<span class="keyword">char</span>* ps)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (*ps == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>+My_strlen3(ps+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strcpy"><code>strcpy</code></h3><h4 id="简单介绍-2">简单介绍</h4><p><code>char * strcpy ( char * destination, const char * source );</code></p><p>Copies the C string pointed by <em>source</em> into the array pointed by <em>destination</em>, including the terminating null character (and stopping at that point).</p><p>以<code>\0</code>结束，且将<code>\0</code>拷贝到目标空间</p><h4 id="模拟实现-2">模拟实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">My_strcpy</span><span class="params">(<span class="keyword">char</span>* des, <span class="keyword">char</span>* src)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span>* rst = des;</span><br><span class="line"><span class="keyword">while</span> (*src) &#123;</span><br><span class="line">*des = *src;</span><br><span class="line">des++;</span><br><span class="line">src++;</span><br><span class="line">&#125;</span><br><span class="line">*des = *src;</span><br><span class="line"><span class="keyword">return</span> rst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改进</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">My_strcpy1</span><span class="params">(<span class="keyword">char</span>* des, <span class="keyword">char</span>* src)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span>* rst = des;</span><br><span class="line"><span class="keyword">while</span> (*des++ = *src++) &#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strcat"><code>strcat</code></h3><h4 id="简单介绍-3">简单介绍</h4><p><code>char * strcat ( char * destination, const char * source );</code></p><p>Concatenate strings.</p><h4 id="模拟实现-3">模拟实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">My_strcat</span><span class="params">(<span class="keyword">char</span>* des, <span class="keyword">char</span>* src)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span>* ret = des;</span><br><span class="line"><span class="comment">//找到des的&#x27;\0&#x27;</span></span><br><span class="line"><span class="keyword">while</span> (*des) &#123;</span><br><span class="line">des++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符串拷贝</span></span><br><span class="line"><span class="keyword">while</span> (*des++ = *src++) &#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strcmp-2"><code>strcmp</code></h3><h4 id="简单介绍-4">简单介绍</h4><p><code>int strcmp ( const char * str1, const char * str2 );</code></p><p>Compare two strings.</p><h4 id="模拟实现-4">模拟实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">My_strcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str1, <span class="keyword">const</span> <span class="keyword">char</span>* str2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (*str1 == *str2) &#123;</span><br><span class="line"><span class="keyword">if</span> (*str1 == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">str1++;</span><br><span class="line">str2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*str1 &gt; *str2) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strstr"><code>strstr</code></h3><h4 id="简单介绍-5">简单介绍</h4><p><code>const char * strstr ( const char * str1, const char * str2 );</code></p><h4 id="模拟实现-5">模拟实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">My_strstr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str1, <span class="keyword">const</span> <span class="keyword">char</span>* str2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ps1 = str1;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ps2 = str2;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* cur = str1;</span><br><span class="line"><span class="keyword">while</span> (*ps1) &#123;</span><br><span class="line">ps1 = cur;</span><br><span class="line"><span class="keyword">while</span> (*ps1 == *ps2 &amp;&amp; *ps1 &amp;&amp; *ps2) &#123;</span><br><span class="line">ps1++;</span><br><span class="line">ps2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*ps2 == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">cur++;</span><br><span class="line">ps2 = str2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//*ps1和*ps2不相等时，要重新找ps2在ps1中的位置，ps2复原，ps1继续找下一位（也就是cur的下一位）。</span></span><br></pre></td></tr></table></figure><h2 id="内存操作类">内存操作类</h2><h3 id="memcpy"><code>memcpy</code></h3><h4 id="简单介绍-6">简单介绍</h4><p><code>void * memcpy ( void * destination, const void * source, size_t num );</code></p><p>Copy block of memory.</p><h4 id="模拟实现-6">模拟实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">My_memcpy</span><span class="params">(<span class="keyword">void</span>* des, <span class="keyword">void</span>* src, <span class="keyword">size_t</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">void</span>* ret = des;</span><br><span class="line"><span class="keyword">while</span> (count--) &#123;</span><br><span class="line">*(<span class="keyword">char</span>*)des = *(<span class="keyword">char</span>*)src;</span><br><span class="line">des = (<span class="keyword">char</span>*)des + <span class="number">1</span>;</span><br><span class="line">src = (<span class="keyword">char</span>*)src + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="memmove"><code>memmove</code></h3><h4 id="简单介绍-7">简单介绍</h4><p><code>void * memmove ( void * destination, const void * source, size_t num );  </code></p><p>Move block of memory,allowing the <em>destination</em> and <em>source</em> to overlap.</p><h4 id="模拟实现-7">模拟实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">My_memmove</span><span class="params">(<span class="keyword">void</span>* des, <span class="keyword">void</span>* src, <span class="keyword">size_t</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (des &lt; src) &#123;</span><br><span class="line"><span class="comment">//从前向后拷贝</span></span><br><span class="line"><span class="keyword">while</span> (count--) &#123;</span><br><span class="line">*(<span class="keyword">char</span>*)des = *(<span class="keyword">char</span>*)src;</span><br><span class="line">des = (<span class="keyword">char</span>*)des + <span class="number">1</span>;</span><br><span class="line">src = (<span class="keyword">char</span>*)src + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//从后向前拷贝</span></span><br><span class="line">des = (<span class="keyword">char</span>*)des + count - <span class="number">1</span>;</span><br><span class="line">src = (<span class="keyword">char</span>*)src + count - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (count--) &#123;</span><br><span class="line">*(<span class="keyword">char</span>*)des = *(<span class="keyword">char</span>*)src;</span><br><span class="line">des = (<span class="keyword">char</span>*)des - <span class="number">1</span>;</span><br><span class="line">src = (<span class="keyword">char</span>*)src - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字符串处理类&quot;&gt;字符串处理类&lt;/h2&gt;
&lt;h3 id=&quot;strlen&quot;&gt;&lt;code&gt;strlen&lt;/code&gt;&lt;/h3&gt;
&lt;h4 id=&quot;简单介绍&quot;&gt;简单介绍&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;size_t strlen ( const char * str );&lt;/c</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="c" scheme="https://youngsay.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c语言操作符练习总结</title>
    <link href="https://youngsay.cn/2022/03/07/C-operator2/"/>
    <id>https://youngsay.cn/2022/03/07/C-operator2/</id>
    <published>2022-03-07T02:49:01.000Z</published>
    <updated>2022-03-14T11:57:46.135Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sizeof-的坑🕳">sizeof()的坑🕳</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    i--;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="keyword">sizeof</span>(i))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&lt;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察上端代码，思考一下输出结果是什么？</p><p>首先定义了一个全局变量，全局变量没有赋值，默认值为0；然后i–；i变成了-1.你也许会说sizeof(-1),-1是int类型的，占4个字节，-1&lt;4,结果不就是<code>&lt;</code>吗！其实不然，结果是<code>&gt;</code>,-1大于4？数学是体育老师教的！</p><p>原因在于sizeof()的返回值是无符号整型，也就是unsigned int，两数比较时，编译器会将左侧的值也转换成无符号整数，-1在内存中存储的是全1，即11111111111111111111111111111111，无符号嘛，会认为这是一个很大的数，所以最后输出了<code>&gt;</code>.</p><p>所以当一个数与sizeof()直接比较时，就要小心咯，可能会有意想不到的结果。</p><h3 id="运算符优先级">运算符优先级</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line">a = <span class="number">5</span>;</span><br><span class="line">c = ++a;</span><br><span class="line">b = ++c, c++, ++a, a++;</span><br><span class="line">b += a++ + c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d c = %d\n:&quot;</span>, a, b, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察上段代码，输出结果是什么?很烦这种代码，虽然没什么意义，但既然错了，还是记录下吧。主要考察操作符的优先级和结合性。主要说两点，一是逗号表达式的优先级最低，所以<code>b= ++c , c++ , ++a , a++;</code>先算b=++a，然后再算逗号后面的操作。二是<code>+=</code>操作符的优先级也很低，所以在<code>b += a++ + c</code>中先计算<code>a++ +c</code>,再将结果加上b后赋值给b。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220314195744.png" alt="image-20220306211323371"></p><h3 id="二进制中1的个数">二进制中1的个数</h3><p>求二进制中1的个数，有很多方法。</p><p><strong>方法一</strong>：利用按位与<code>&amp;</code>和移位<code>&gt;&gt;</code>运算符。一个数按位与&amp;1，可以求得这个数二进制的最低位。只求最低位哪行啊，我要的是所有位上1的个数，结合移位运算符，(n&gt;&gt;1)&amp;1,得到的就是第二位，(n&gt;&gt;2)&amp;1,得到的就是第三位，一直到31，得到一次加一次，就得到了二进制中所有的1.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((n &gt;&gt; i) &amp; <span class="number">1</span>) count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>：利用%和/运算符，比如1987，1987%10，得到了后一位7，1987/10%10，得到了8，1987/100%10，得到了9，1987%1000/10，得到了1。十进制/10%10，二进制自然就/2%2。值得注意的是数的类型要定义为<code>unsigned int</code>，否则该方法只适用于正整数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> tmp = n;</span><br><span class="line"><span class="keyword">while</span> (tmp) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tmp % <span class="number">2</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">tmp = tmp / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法三</strong>：利用表达式<code>n=n&amp;(n-1)</code>,计算表达式执行的次数，n为0时结束循环。如下图所示：</p><p><img src="C:%5CUsers%5Cpanghu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220307103014897.png" alt="image-20220307103014897"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line">n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两个数二进制不同位的个数">两个数二进制不同位的个数</h3><p>有了上道题的基础，这道题就迎刃而解了。</p><p>思路一：默认最低位是第0位，n&gt;&gt;i&amp;1可以求得第i位的二进制数，如果两数不等，计数器加一即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((a &gt;&gt; i &amp; <span class="number">1</span>) != (b &gt;&gt; i &amp; <span class="number">1</span>)) count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路二：利用异或<code>^</code>运算符，两数异或，相同位为0，不同位为1。对异或后的数求二进制中1的个数，便得到了二进制中不同位的个数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="comment">//1.两数异或</span></span><br><span class="line"><span class="keyword">int</span> c = a ^ b;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//2.求二进制中1d</span></span><br><span class="line"><span class="keyword">while</span> (c) &#123;</span><br><span class="line">c = c &amp; (c - <span class="number">1</span>);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;sizeof-的坑🕳&quot;&gt;sizeof()的坑🕳&lt;/h3&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="c" scheme="https://youngsay.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>浮点数在内存中的存储</title>
    <link href="https://youngsay.cn/2022/03/04/C-IEEE754/"/>
    <id>https://youngsay.cn/2022/03/04/C-IEEE754/</id>
    <published>2022-03-04T03:31:01.000Z</published>
    <updated>2022-03-31T06:27:28.961Z</updated>
    
    <content type="html"><![CDATA[<p>观察下面的代码，输出结果是什么呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">float</span> *pFloat = (<span class="keyword">float</span> *)&amp;n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;n的值为：%d\n&quot;</span>,n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为：%f\n&quot;</span>,*pFloat);</span><br><span class="line">*pFloat = <span class="number">9.0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num的值为：%d\n&quot;</span>,n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为：%f\n&quot;</span>,*pFloat);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://panghu-1256092140.cos.ap-beijing.myqcloud.com/%20tuchuang-master/20220331140728.png" alt="打印结果"></p><p>以整数存储，以整数取出，结果相同；以浮点数存储，以浮点数取出，结果也相同。</p><p>以整数存储，以浮点数取出，结果不同；以浮点数存储，以整数取出，结果也不同。</p><p>由此可见，<strong>整数和浮点数在内存中的存储是不同的</strong>。</p><p>下面我们看一下浮点数的存储规则，浮点数在内存中的表示是由IEEE（电气与电子工程协会）规定好的。</p><p>任何一个二进制浮点数，可以表示成</p><p><img src="https://panghu-1256092140.cos.ap-beijing.myqcloud.com/%20tuchuang-master/20220331141200.png" alt="image-20220304192024795"></p><p>(-1)^S表示符号位，s为0浮点数是正数，s为-1浮点数是负数；M表示有效数字，范围在[1,2);2^E表示指数位。</p><p>这样看很难理解，我们举例说明。</p><p><code>float a = -5.0f</code>，浮点数-5.0，用二进制表示为-101.0，写成科学计数法的形式：-1.010*2^2，s=1，M=1.010，E=2</p><p>表示好之后，我们将它存入内存。IEEE 754规定，对于32位的单精度浮点数，最高位是符号位S，占1位，然后是指数位E，占8位，最后是有效数字M，占23位；对于双精度浮点数，占位分别为1，11，52，我们这里主要介绍float的存储。</p><p>![单精度浮点数在内存中的存储](<img src="!%5B%5D(https://panghu-1256092140.cos.ap-beijing.myqcloud.com/%20tuchuang-master/20220331141200.png)20220304184553.png" alt=""></p><p>关于存储，E和M有一些特殊规定：</p><p>M范围是[1，2），所以保存时干脆省略1，比如-5.0的M是1.010，保存时直接写成010，后面再加20个0，凑够23位。即01000000000000000000.</p><p>E是无符号整数，但科学计数法E可能有负数，所以存入内存时，8位E加上127，11位E加上1023加以修正，比如-5.0的E是2，保存时加上127就是129，即10000001.</p><p>所以浮点数-5.0在内存中的存储是11000000101000000000000000000，用16进制表示就是0xc0a00000</p><p><img src="https://panghu-1256092140.cos.ap-beijing.myqcloud.com/tuchuang-master/20220304184600.png" alt="-5.0的地址"></p><p>以上是关于浮点数存储的规则，下面是从内存中取出的规则。如何取出，分3种情况，全看E。</p><p>①E不全为0或不全为1时，怎样存储的，就怎样取出。存储时M省略了1，取出是再加上1，存储时E加了127修正，取出时再减去127。</p><p>②E全为0，E=1-127=-126，M不再加上1，而是还原成0.xxxxx；</p><p>③E全为1，这时，如果有效数字M全为0，表示±无穷大（正负取决于符号位s）</p><p>关于E取出的规则，简单了解下就好。</p><p>我们了解了IEEE标准之后，知道了浮点数在内存中的存储规则，下面来看一下上面那段代码。</p><p>第一个printf语句打印的是整数，整数存储，整数打印，结果当然是9；</p><p>第二个printf语句是以浮点数打印，结果是0.000000，以整数存储，以浮点数取出，结果必然不同。9以整数存储，二进制就是00000000000000000000000000001001，S=0，E=00000000，M=00000000000000000001001，以浮点数取出，因为E全为0，所以取出时E=1-127=-126，M忽略1，还原成0.00000000000000000001001，所以结果就是(-1)^0 * 0.00000000000000000001001 * 2^-126,也就是0.000000.</p><p>第三个printf语句是以整数打印，以浮点数存储，以整数取出，结果必然不同。9.0以浮点数存储，二进制就是1001.0，科学计数法表示为1.0010*2^3,其中S=1，E=3，M=1.0010，根据存储规则，存入内存中时，E=3+127=130，即10000010，M忽略1，结果为0010，凑够23位，即00100000000000000000000，占位比S:E:M=1:8:23,最终结果是01000001000100000000000000000000。以浮点数存储后，以整型打印，会将其视为整数，最高位是符号位0，正数原码反码补码一样，最终结果是1,091,567,616</p><p>第四个printf语句打印的是浮点数，以浮点数存储，以浮点数打印，结果是9.0；</p><p>好了，说了这么多，一言以蔽之：整数和浮点数在内存中的存储规则不同，导致输出结果不同。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;观察下面的代码，输出结果是什么呢？&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="c" scheme="https://youngsay.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>倒置字符串，我爱中国，中国爱我。</title>
    <link href="https://youngsay.cn/2022/02/28/C-reverse/"/>
    <id>https://youngsay.cn/2022/02/28/C-reverse/</id>
    <published>2022-02-28T02:31:01.000Z</published>
    <updated>2022-03-14T11:56:39.974Z</updated>
    
    <content type="html"><![CDATA[<p>描述：将一句话的单词进行倒置，标点不倒置。比如 I like China. 经过函数后变为：China. like I</p><p>有些时候，主语和宾语位置互换词义不会改变。比如，一件衣服穿两天，两天穿一件衣服。北京是首都，首都是北京。如果你已经读完了这段话，恭喜你已经浪费了几秒钟，这和这道编程题没什么关系……</p><p>思路：我们可以<strong>两次使用字符串逆序</strong>，第一次先将字符串整体逆序，第二次将单个单词再逆序。逆序字符串，无非是找到字符串的起始位置和结束位置，也就是左下标和右下标，当左下标地址小于右下标地址时，互换两个下标位置的字符串。<strong>关键在于寻找起始位置和结束位置</strong>，例如字符串arr，第一次字符串整体逆序，起始位置就是字符串的首地址arr，结束位置就是<code>起始位置+字符串长度-1</code>.第二次逆序每个单词，起始位置就是每个单词的起始位置，结束位置是空格或字符串0的前一位置。逆序每个单词要注意何时进行逆序，遍历整个字符串，当arr[i]的元素为空格或字符串0时，进行单词的逆序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>* start, <span class="keyword">char</span>* end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = *start;</span><br><span class="line">        *start = *end;</span><br><span class="line">        *end = tmp;</span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    gets(arr);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(arr);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//先将字符串整体翻转</span></span><br><span class="line">    reverse(arr, arr + len - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">char</span>* a = arr;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;=len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == <span class="string">&#x27; &#x27;</span> || arr[i] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            reverse(a, arr + i<span class="number">-1</span>);<span class="comment">//空格之前的再一次翻转，两次翻转正好</span></span><br><span class="line">            a = (arr + i + <span class="number">1</span>);     </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220228175122.png" alt="运行结果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;描述：将一句话的单词进行倒置，标点不倒置。比如 I like China. 经过函数后变为：China. like I&lt;/p&gt;
&lt;p&gt;有些时候，主语和宾语位置互换词义不会改变。比如，一件衣服穿两天，两天穿一件衣服。北京是首都，首都是北京。如果你已经读完了这段话，恭喜你已经浪</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="c" scheme="https://youngsay.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>多种方法求两个正整数的最大公约数和最小公倍数</title>
    <link href="https://youngsay.cn/2022/02/27/C-LCM/"/>
    <id>https://youngsay.cn/2022/02/27/C-LCM/</id>
    <published>2022-02-27T10:31:01.000Z</published>
    <updated>2022-02-27T10:33:32.591Z</updated>
    
    <content type="html"><![CDATA[<p>鲁迅说过：“求解最大公约数和最小公倍数有很多方法”，公约数，就是几个数共有的约数，最大公约数，就是公约数中最大的那个数，公倍数，就是几个数共有的倍数，最小公倍数，就是公倍数中最小的那个数。虽然看起来是句废话，其实它就是废话……下面我们看一下求解最大公约数和最小公倍数的几种方法。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220227183031.png" alt=""></p><h3 id="求任意两个正整数的最大公约数">求任意两个正整数的最大公约数</h3><p>最大公约数（Greatest Common Divisor，GCD），先说约数，a能被b整除，b就是a的约数，几个数共有的约数就是这几个数的公约数，公约数中最大的那个数就是最大公约数。举个例子，4和20的公约数有1，2，4，最大公约数是4。可见两个数的最大公约数必不大于两数中最小的那个。</p><p>思路一：如果求出最大公约数，穷举法从小到大（从1到两数中较小的一个）遍历，然后输出最大的那个，这样做比较麻烦，不妨我们从大到小（从两数中较小的一个到1）遍历，第一个能同时整除两个数的那个即为所求。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="comment">//a中存储较大的那个数，b存储小数，当a&lt;b时交换两数</span></span><br><span class="line"><span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">tmp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从b到1遍历，找最大公约数</span></span><br><span class="line"><span class="keyword">for</span> (i = b; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line"><span class="comment">//同时整除两个数的那个数即为所求，找到后break结束遍历</span></span><br><span class="line"><span class="keyword">if</span> (a % i == <span class="number">0</span> &amp;&amp; b % i == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路二：我们可以用辗转相除法求最大公约数，例如15和20两个数，15%20=15，20%15=5，15%5=0，两数相除，将除数当作下个算式的被除数，余数当作除数，如此往复，当余数为0时，最后一个算式的除数5就是15和20的最大公约数。我可能说的有些复杂了，看代码就懂了，还有这一思路的妙处是不用判断两数的大小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> c = b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="comment">//辗转相除，余数为0跳出循环</span></span><br><span class="line"><span class="keyword">while</span> (a % b != <span class="number">0</span>) &#123;</span><br><span class="line">c = a % b;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求任意两个正整数的最小公倍数">求任意两个正整数的最小公倍数</h3><p>最小公倍数（Least Common Multiple，LCM），若a能被b整除，a就是b的倍数，对于两个整数来说，两数共有倍数中最小的一个便是最小公倍数。</p><p>思路一：我们可以借助最大公约数求最小公倍数。<strong>两数乘积除以最大公约数便是最小公倍数</strong>。若a和b的最大公约数是c，那么最小公倍数便是<strong>a*b/c</strong>，最大公约数的求法如上，这一思路这里不再列出代码。</p><p>思路二：两个数的最小公倍数就是能被两数整除的那个最小的数（废话文学），如果较大的数能被较小的数整除，那么较大的数就是两数的最小公倍数，否则要从较大的数开始，一次向上遍历，知道找出能同时被两数整除的那个数。举个例子，5和25，25能被5整除，25就是5和25的最小公倍数；5和7，较大的数7不能被5整除，7一直加1，变成8，9，10……，35，知道35，35能被5和7整除，35便是5和7的最小公倍数。废话有点多了，上代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="comment">//a存放两数中较大的那个，b存放小数</span></span><br><span class="line"><span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">tmp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从最大数开始向上计数</span></span><br><span class="line"><span class="keyword">for</span> (i = a; i &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line"><span class="comment">//找出最小公倍数，退出循环</span></span><br><span class="line"><span class="keyword">if</span> (i % a == <span class="number">0</span> &amp;&amp; i % b == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路三：众所周知，5和7的最小公倍数是35，35能被5和7同时整除（又是一句废话），看下面这个算式：<strong>5*i%7=0</strong>，<code>5*i</code>的结果既能被5整除，也能被7整除，所以<code>5*i</code>便是5和7的最小公倍数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">while</span> (a * i % b) &#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a * i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;鲁迅说过：“求解最大公约数和最小公倍数有很多方法”，公约数，就是几个数共有的约数，最大公约数，就是公约数中最大的那个数，公倍数，就是几个数共有的倍数，最小公倍数，就是公倍数中最小的那个数。虽然看起来是句废话，其实它就是废话……下面我们看一下求解最大公约数和最小公倍数的几种方</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="c" scheme="https://youngsay.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio环境下一段有趣的代码</title>
    <link href="https://youngsay.cn/2022/02/26/C-Traps-Pitfalls/"/>
    <id>https://youngsay.cn/2022/02/26/C-Traps-Pitfalls/</id>
    <published>2022-02-26T13:00:41.000Z</published>
    <updated>2022-02-26T13:28:18.126Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">12</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;youngsay.cn\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察这段代码，运行会有何效果？</p><p>你可能会说，既然越界访问了，那不就报错了？其实不然，运行发现，程序没有报错，一直死循环。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220226211523.png" alt="运行效果"></p><p><strong>注意：该段代码依赖环境，vs编译器，debug模式，x86平台下才有这样的效果。</strong></p><p>为什么陷入了死循环，这要从栈区的使用习惯开始说起。静态变量，函数形参都存放到栈中，而栈是从高地址开始存放。**栈区的使用习惯是先使用高地址处的空间。**我们还知道，**数组随着下标变大，地址是由低到高变化的。**所以上段代码在栈中的内存布局，如下图所示。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220226211531.png" alt="栈内存布局"></p><p>vs编译器，debug模式，x86平台下，i和数组arr间刚好空了2个下标的空间。所以i和arr[12]指向了同一块地址，不信我们可以调试看一下i和arr[12]的地址。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220226211914.png" alt="地址比较"></p><p>当i自增到12，执行<code>arr[12]=0</code>时，因为共用同一块空间，i也变成了0，0&lt;12,再一次进入了循环，如此往复便陷入了死循环。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="c" scheme="https://youngsay.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现简单的扫雷游戏</title>
    <link href="https://youngsay.cn/2022/02/09/sweep-mine/"/>
    <id>https://youngsay.cn/2022/02/09/sweep-mine/</id>
    <published>2022-02-09T10:22:01.000Z</published>
    <updated>2022-02-15T12:52:13.867Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《扫雷》是一款大众类的益智小游戏，游戏目标是在最短的时间内根据点击格子出现的数字找出所有非雷格子，同时避免踩雷，踩到一个雷即全盘皆输。</p></blockquote><p>这篇博客教大家用C语言制作一个简易版扫雷游戏，和之前的井字棋大同小异。</p><p>我们准备三个文件,分别为<code>game.c</code>,<code>test.c</code>,<code>game.h</code></p><p><code>game.c</code>文件用来写实现游戏功能的各个函数代码,<code>test.c</code>文件写游戏的总流程,<code>game.h</code>文件用来声明函数和初始值.</p><p>先看<code>test.c</code>，由<code>menu()``game()``main()</code>三个函数组成。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;game.h&quot;</span></span></span><br><span class="line">menu()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----1.开始游戏-----\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----2.退出游戏-----\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">game()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//棋盘——后台</span></span><br><span class="line"><span class="keyword">char</span> mine[ROWS][COLS] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//棋盘——玩家</span></span><br><span class="line"><span class="keyword">char</span> show[ROWS][COLS] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//初始化棋盘</span></span><br><span class="line">init_arr(mine, ROWS, COLS,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">init_arr(show, ROWS, COLS, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line">display_arr(show, ROW, COL);</span><br><span class="line"><span class="comment">//display_arr(mine, ROW, COL);</span></span><br><span class="line"><span class="comment">//放炸弹</span></span><br><span class="line">set_mine(mine, ROW, COL);</span><br><span class="line"><span class="comment">//排雷</span></span><br><span class="line">set_coordinate(mine, show, ROW, COL);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">int</span> input = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入选项&gt;\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">switch</span> (input)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">game();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;退出游戏\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入错误，请重新输入\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是<code>game.h</code>头文件,文件内是头文件的引用,数据的初始化,游戏函数的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROWS 11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COLS 11</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW 9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL 9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINE 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化棋盘</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_arr</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> rows, <span class="keyword">int</span> cols,<span class="keyword">char</span> <span class="built_in">set</span>)</span></span>;</span><br><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_arr</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br><span class="line"><span class="comment">//放炸弹</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_mine</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br><span class="line"><span class="comment">//排雷</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_coordinate</span><span class="params">(<span class="keyword">char</span> mine[ROWS][COLS], <span class="keyword">char</span> show[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br></pre></td></tr></table></figure><p>我们定义了两个棋盘，一个用来放雷（玩家看不到），一个用来展示玩家选定的位置四周的地雷数。如果是9x9的棋盘，当玩家选择边界位置（如1 1），程序检索其四周的地雷会造成越界访问，所以将棋盘做成11x11，但只打印9x9给玩家。</p><p>下面是<code>game.c</code>文件，我们来看下各个函数是如何实现的。</p><p>首先是初始化棋盘<code>init_arr</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_arr</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> rows, <span class="keyword">int</span> cols,<span class="keyword">char</span> <span class="built_in">set</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">arr[i][j] = <span class="built_in">set</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形参有4个，分别是棋盘，行数，列数，放置的元素。便利整个棋盘，将棋盘初始化。mine棋盘初始化为0，表示不是地雷，1表示地雷；show棋盘初始化为*，展示给玩家。</p><p>接着是打印棋盘<code>display_arr</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_arr</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//打印一个列号【列号就是单独的一行】</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= row; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= row; i++) &#123;</span><br><span class="line"><span class="comment">//打印一个行号【行号就是单独的一列】</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= col; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入的参数的棋盘，行数，列数，注意这里的行数列数都是9，与初始化不同。为了方便玩家操作，我们在棋盘上标上对应的行数和列数，如下图所示。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220209181958.png" alt="image-20220209171309296"></p><p>接下来布置地雷<code>set_mine</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_mine</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( count &lt; MINE)</span><br><span class="line">&#123;</span><br><span class="line">x = rand() % row + <span class="number">1</span>;</span><br><span class="line">y = rand() % col + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[x][y] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">arr[x][y] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MINE</code>是10，当count&lt;10,生成1-9的随机数，如果坐标位置是0，将该位置置为地雷，count++，直到地雷数为10。</p><p>最后是排雷<code>set_coordinate</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howmuch_mine</span><span class="params">(<span class="keyword">char</span> mine[ROWS][COLS],<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> mine[x][y + <span class="number">1</span>] + mine[x - <span class="number">1</span>][y + <span class="number">1</span>] + mine[x - <span class="number">1</span>][y] + mine[x - <span class="number">1</span>][y - <span class="number">1</span>] + mine[x][y - <span class="number">1</span>] + mine[x + <span class="number">1</span>][y - <span class="number">1</span>] + mine[x + <span class="number">1</span>][y] + mine[x + <span class="number">1</span>][y + <span class="number">1</span>] - <span class="number">8</span> * <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排雷</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_coordinate</span><span class="params">(<span class="keyword">char</span> mine[ROWS][COLS], <span class="keyword">char</span> show[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (counts&lt;(ROW*COL-MINE))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入坐标&gt;\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span> (x &gt;=<span class="number">1</span> || x&lt;=col &amp;&amp; y &gt;&gt;<span class="number">1</span> || y&lt;=col)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (show[x][y] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (mine[x][y] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;很遗憾，你被炸了！\n&quot;</span>);</span><br><span class="line">display_arr(mine, ROW, COL);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//计算炸弹数</span></span><br><span class="line"><span class="keyword">int</span> count = howmuch_mine(mine, x, y);</span><br><span class="line">show[x][y] = count + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">display_arr(show, ROW, COL);</span><br><span class="line">counts++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;坐标已被占用，请重新输入\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;坐标非法，请重新输入&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (counts == (ROW * COL - MINE)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;恭喜你，排雷成功\n&quot;</span>);</span><br><span class="line">display_arr(mine, ROW, COL);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入坐标，判断坐标的合法性，当坐标合法时，如果坐标处是地雷，结束游戏。如果坐标处不是地雷，将show棋盘坐标处的*改成炸弹数，这里需要计算炸弹数，单独写成<code>howmuch_mine</code>函数。函数逻辑是将<code>mine</code>棋盘坐标处四周的元素（8个）相加，无外乎就是字符0或1，再减去8x字符‘0’，这样结果就是地雷个数。</p><p>游戏怎样终止呢，排雷成功的条件是什么？9x9的棋盘，10个地雷，理应排71次，将排雷流程写入while语句，定义次数counts，当counts小于71，进入循环，成功排雷1次counts+1，如此往复。跳出while循环后，如果counts为71，排雷成功，打印地雷棋盘<code>mine</code>。</p><p>大概思路就是这样，一个简单的扫雷游戏就做好了，哪里有错误欢迎评论区指出。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;《扫雷》是一款大众类的益智小游戏，游戏目标是在最短的时间内根据点击格子出现的数字找出所有非雷格子，同时避免踩雷，踩到一个雷即全盘皆输。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇博客教大家用C语言制作一个简易版扫雷游戏，和之前的井字棋大同小异。</summary>
      
    
    
    
    <category term="分享" scheme="https://youngsay.cn/categories/%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>你有无一段游戏人生？</title>
    <link href="https://youngsay.cn/2022/02/06/game-life/"/>
    <id>https://youngsay.cn/2022/02/06/game-life/</id>
    <published>2022-02-06T12:39:01.000Z</published>
    <updated>2022-02-15T12:47:41.069Z</updated>
    
    <content type="html"><![CDATA[<p>今天初六了，眼看新年假期就要结束了，今天是打工人的最后一天假期，我也快该开学了。祝各位朋友新的一年健康快乐，工作顺利，学业进步！</p><p>过年这半个月我又一次地沉迷游戏，这篇博客就来聊聊游戏。从小我就是个游戏迷，没少花时间玩游戏，穿越火线，qq飞车，dnf，逆战，大冲锋，反恐行动，兽人必须死，上古世纪，枪神纪等，这些游戏伴随了我的小初高中，高考结束后又玩上了人类一败涂地，糖豆人等，现在偶尔玩下糖豆人，枪神纪。有时闲来无聊会搜下小时候玩过的游戏，发现已经停服，多少有些感慨。</p><p>我玩的时间最久的是穿越火线和枪神纪。说到玩游戏，我觉得我大多数情况下不是玩游戏，而是沉迷游戏。</p><h1>为什么会沉迷游戏？</h1><p>我觉得主要是游戏好玩，还有就是压力小。</p><p>游戏好玩，有各种模式，活动，奖惩机制，想着法的让你爱上它。通过玩游戏，由菜一点点变厉害，由负战绩变成正战绩，由团队合作一起战胜敌方，这都会使我成就感倍增。如果我通过其他事情获得了更大的成就感，得到了更多的乐趣，便会不再沉迷游戏。</p><p>游戏好玩，有好玩的伙伴，有一段熟悉又陌生，长久且纯洁的友情。过年这半个月，我大部分时间都在打枪神纪，好久没花这么长时间玩游戏了，我想原因之一便是这段友情。打开枪神纪，大部分好友状态都是离线，我想他们和我一样早都退服了。惊喜的是还有几个好友仍在玩，更惊喜的是他们给我发了消息，问我还记不记得他们。他们都改名了，但当他们告诉我之前的名字，我仍能隐约回忆起那段美好的日子，甚至他爱玩的职业，他与我常玩的模式，我都能依稀记得。“想起那次夕阳下的奔跑，那曾是我逝去的青春”，虽然我们很久没一起玩了，但再一次开黑还是熟悉的感觉。之前玩游戏是因为激情，现在玩游戏全是感情。</p><p><img src="https://s4.ax1x.com/2022/02/06/HKtaqA.png" alt="枪神纪城市截图"></p><p>压力小，没有学习的压力，没有工作的压力，没有生活的压力。我不相信一个吃了上顿没下顿，今天不工作明天就会饿死的人还能没日没夜地沉迷游戏。我觉得沉迷游戏的大都是学生，压力小，工作后，需要自己来面临各种压力后，生活容不得你我去沉迷游戏。有人也许会说我工作了，但我每天都会玩游戏。我认为区分玩游戏和沉迷游戏的标准是游戏有没有成为生活的大部分，游戏有没有影响正常生活。工作生活之余玩一两把游戏不仅没有耽误正常生活，还会丰富日常生活。</p><h1>如何戒掉游戏？</h1><p>我觉得没有必要，每天放松娱乐玩上一两把并无大碍，只要别沉迷游戏无法自拔，耽误正常生活就行了。那如何不再沉迷游戏？</p><p>这是我小时候一直面对的问题，我也没能解决，有时候一玩就忘了时间，一玩就停不下来。直到现在，我也会间接性地沉迷游戏。比如过年这小半个月，看了下游戏时长，我玩了48小时。想起了一个段子，一个人因其貌不扬而烦恼，长大后不再烦恼，不是长开了，而是看开了。我以前会因过度玩游戏而烦恼，现在我不再烦恼，不是因为戒掉了游戏，而是有了更重要的事去做。寒暑假来了，我一玩游戏，也许又上瘾了，但时间不会太长，多则两周，两周后自然而然就不再上瘾。不是玩腻了，不是游戏不好玩了，而是有压力了，有更重要的事了。</p><p>正如我上面所说的，沉迷游戏的原因一是游戏好玩，一是压力小。所以我举得不再沉迷游戏的做法，一是找到比游戏更有乐趣的事，找到更有成就感的事，一是压力大后，自然而然就不再沉迷游戏。我不是说主动给自己给自己施压，这是很客观的事，到了一定阶段，压力自然而然就会出现。</p><p>最后，各位有没有沉迷游戏的经历，是否有沉迷游戏的烦恼，有无行之有效的解决办法，欢迎各抒己见。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天初六了，眼看新年假期就要结束了，今天是打工人的最后一天假期，我也快该开学了。祝各位朋友新的一年健康快乐，工作顺利，学业进步！&lt;/p&gt;
&lt;p&gt;过年这半个月我又一次地沉迷游戏，这篇博客就来聊聊游戏。从小我就是个游戏迷，没少花时间玩游戏，穿越火线，qq飞车，dnf，逆战，大冲</summary>
      
    
    
    
    <category term="日常" scheme="https://youngsay.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言实现简单的井字棋游戏</title>
    <link href="https://youngsay.cn/2022/01/25/Tic-Tac-Toe/"/>
    <id>https://youngsay.cn/2022/01/25/Tic-Tac-Toe/</id>
    <published>2022-01-25T14:42:01.000Z</published>
    <updated>2022-02-15T12:57:28.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>井字棋，英文名叫Tic-Tac-Toe，是一种在3*3格子上进行的连珠游戏，和五子棋类似，由于棋盘一般不画边框，格线排成井字故得名。</p></blockquote><p>想必大家小时候都玩过井字棋,今天分享大家一个用C语言做简单的井字棋游戏的教程,通过井字棋游戏,既能回忆起童年的美好,也能熟悉简单的C语言语法.</p><p>游戏演示：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220125231500.gif" alt="动画"></p><p>我们准备三个文件,分别为<code>game.c</code>,<code>test.c</code>,<code>game.h</code></p><p><code>game.c</code>文件用来写实现游戏功能的各个函数代码,<code>test.c</code>文件写游戏的总流程,<code>game.h</code>文件用来声明函数和初始值.</p><p>先来看<code>test.c</code>文件</p><p>文件内有三个函数,分别为菜单,游戏,主函数.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------1.开始游戏-----\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------2.退出游戏-----\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单很简单,就是开始游戏和退出游戏.我们可以在主函数中switch-case语句实现,输入1开始游戏,输入2退出游戏,其他输入均提示重新输入.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">menu();</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">int</span> input = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入选项\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">switch</span> (input)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">game();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>玩家输入1后进入游戏函数,游戏函数内对函数进行调用,函数的声明放在game.h头文件,定义放在game.c源文件.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">game</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> rst = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> board[ROW][COL] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//初始化棋盘</span></span><br><span class="line">InitBoard(board,ROW,COL);</span><br><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line">DisplayBoard(board, ROW, COL);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//玩家下棋</span></span><br><span class="line">player_move(board, ROW, COL);</span><br><span class="line">DisplayBoard(board, ROW, COL);</span><br><span class="line"><span class="comment">//判断输赢</span></span><br><span class="line">rst = isWinner(board,ROW,COL);</span><br><span class="line"><span class="keyword">if</span> (rst != <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//电脑下棋</span></span><br><span class="line">computer_move(board, ROW, COL);</span><br><span class="line">DisplayBoard(board, ROW, COL);</span><br><span class="line">rst = isWinner(board, ROW, COL);</span><br><span class="line"><span class="keyword">if</span> (rst != <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (rst == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;恭喜你，赢得了胜利！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (rst == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;很遗憾，你输了！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;平局了\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来简单说一下我们要实现的功能.首先,要初始化一个棋盘,我们可以用用三行三列的数组.玩家开始游戏,要将空棋盘显示给玩家,这时我们要打印棋盘.接着玩家下棋,输入坐标,将坐标处放上棋子,我们用*代表玩家的棋子,玩家下好后电脑下棋,用#代表电脑.当玩家或电脑先实现三个棋子连在一起,游戏结束.</p><p>下面是game.h头文件,文件内时头文件的引用,数据的初始化,游戏函数的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化棋盘的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitBoard</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayBoard</span><span class="params">(<span class="keyword">char</span> board[ROW][COL],<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span>;</span><br><span class="line"><span class="comment">//玩家下棋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">player_move</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br><span class="line"><span class="comment">//电脑下棋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">computer_move</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br><span class="line"><span class="comment">//判断输赢</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">isWinner</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br></pre></td></tr></table></figure><p>下面是game.c文件的各个函数的定义</p><p>首先是初始化棋盘,便利3x3的数组,将数组内的元素置为空格字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化棋盘的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitBoard</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">board[i][j] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是打印棋盘,打印棋盘很简单,但为了美观要将棋盘打印为井字,所以要花一些巧思</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayBoard</span><span class="params">(<span class="keyword">char</span> board[ROW][COL],<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %c &quot;</span>, board[i][j]);</span><br><span class="line"><span class="keyword">if</span> (j &lt; col - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (i &lt; row - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (j &lt; col - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是玩家下棋,当玩家输入的坐标小于1或大于3的,提示坐标非法,当坐标合法且该位置没有棋子将该坐标放上棋子*</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//玩家下棋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">player_move</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;玩家下棋&gt;\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">1</span> || x&gt;row || y&lt;<span class="number">1</span> || y&gt;col) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;坐标非法\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (board[x - <span class="number">1</span>][y - <span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">board[x - <span class="number">1</span>][y - <span class="number">1</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是电脑下棋,使用rand()和srand()生成随机值,rand()%row生成的值是0-2,+1后就是1-3,纵坐标同理,如果坐标处没有棋子放上棋子#</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//电脑下棋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">computer_move</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;电脑下棋\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = rand() % row;</span><br><span class="line">y = rand() % col;</span><br><span class="line"><span class="keyword">if</span>(board[x][y] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">board[x][y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最关键一步就是判断输赢,判断输赢无非就是行,列和对角线.除了输赢,还有平局,isPeace函数是用来判断平局,遍历棋盘,如果有至少一处为空,继续游戏,如果棋盘满了则为平局.返回*  玩家赢,返回#  电脑赢,返回Q  平局,返回C  继续.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPeace</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断输赢</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">isWinner</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断行</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][<span class="number">0</span>] == board[i][<span class="number">1</span>] &amp;&amp; board[i][<span class="number">1</span>] == board[i][<span class="number">2</span>] &amp;&amp; board[i][<span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> board[i][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断列</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][j] == board[<span class="number">1</span>][j] &amp;&amp; board[<span class="number">1</span>][j] == board[<span class="number">2</span>][j] &amp;&amp; board[<span class="number">1</span>][j] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断对角线</span></span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">0</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">0</span>] == board[<span class="number">2</span>][<span class="number">2</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">0</span>] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">2</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">2</span>] == board[<span class="number">2</span>][<span class="number">0</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">2</span>] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断平局</span></span><br><span class="line"><span class="keyword">if</span> (isPeace(board, row, col) == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是一个用c语言制作简单的井字棋的介绍.代码和逻辑都很简单,只需要一些基础的c语言知识便可实现.技术有限,哪里有请指正,任何问题欢迎评论区留言交流.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;井字棋，英文名叫Tic-Tac-Toe，是一种在3*3格子上进行的连珠游戏，和五子棋类似，由于棋盘一般不画边框，格线排成井字故得名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;想必大家小时候都玩过井字棋,今天分享大家一个用C语言做简单的井字棋游戏的</summary>
      
    
    
    
    <category term="分享" scheme="https://youngsay.cn/categories/%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>【C语言】分支和循环语句常见问题</title>
    <link href="https://youngsay.cn/2022/01/16/C-branch-loop/"/>
    <id>https://youngsay.cn/2022/01/16/C-branch-loop/</id>
    <published>2022-01-16T06:33:41.000Z</published>
    <updated>2022-01-23T12:10:18.613Z</updated>
    
    <content type="html"><![CDATA[<h1>分支语句</h1><h2 id="if-else语句">if-else语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;panghu\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;胖虎\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;panghu\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：panghu</span></span><br></pre></td></tr></table></figure><p>观察上面两段代码，输出结果分别是什么？</p><p>由此可知：else的匹配规则：else总是与<strong>离它最近的未匹配的</strong>if匹配，与缩进无关。</p><h2 id="switch-case语句">switch-case语句</h2><p>switch()括号内是整形表达式。</p><p>case后接整型常量表达式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span> , &amp;i);</span><br><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;工作日\n&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;休息日\n&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>思考下面代码，输出结果是什么？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">switch</span> (n)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            m++;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            n++;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">switch</span> (n)</span><br><span class="line">           &#123;<span class="comment">//switch允许嵌套使用</span></span><br><span class="line">             <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    n++;</span><br><span class="line">             <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    m++;</span><br><span class="line">                    n++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            m++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;m = %d, n = %d\n&quot;</span>, m, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5 3</span></span><br></pre></td></tr></table></figure><h1>循环语句</h1><h2 id="continue比较">continue比较</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i); </span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察上端代码，打印结果是什么？</p><p>结果为1234，然后死循环。</p><p><code>continue</code>是结束本次循环，进入下次循环。当i=5时进入if语句，然后跳出，然后再进入，以此往复。</p><p>再看下面的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是12346789，与while循环相比，这次遇到continue跳出本次循环后能够让<code>i</code>自增，不会进入死循环。</p><h2 id="getchar-和putchar"><code>getchar()</code>和<code>putchar()</code></h2><p>缓存区问题：</p><pre><code>char arr[20] = &#123; 0 &#125;;printf(&quot;请输入密码\n&quot;);scanf(&quot;%s&quot; , arr);printf(&quot;请确认密码 Y/N\n&quot;);int ch = getchar();if ('Y' == ch) &#123;    printf(&quot;确认成功\n&quot;);&#125;else &#123;    printf(&quot;确认失败\n&quot;);&#125;</code></pre><p>当我输入1234时，还没等确认，直接提示确认失败。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220117092528.png" alt="image-20220115154137025"></p><p>原因是当我输入1234后会按回车换行，也就是<code>\n</code>，此时缓存区会存在<code>\n</code>，<code>getchar()</code>会从缓存区取出<code>\n</code>，ch=<code>\n</code>，不等于Y，弹出确认失败。</p><p>如何解决这种问题？</p><p>**方法1：**在<code>scanf</code>语句后面加上<code>getchar()</code>来取出<code>\n</code>，这样ch再访问缓存区就为空了。但这样也有弊端，例如当我输入1234 abcd时又出现错误了。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220117092537.png" alt="image-20220115154856069"></p><p>原因是输入格式%s只读取空格之前的内容，而<code>getchar()</code>只能读取一个字符，所以ch再次读取时发现缓存区还有其他字符且不是Y，提示确认失败·。</p><p><strong>方法2：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> arr[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span> , arr);</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((tmp = getchar()) != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请确认密码 Y/N\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> ch = getchar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;Y&#x27;</span> == ch) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;确认成功\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;确认失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用while循环，多次读取，直到缓存区为空，跳出循环。</p><h2 id="赋值和判断">赋值和判断</h2><p>观察下面代码，该代码循环几次？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, k = <span class="number">0</span>; k = <span class="number">0</span>; i++, k++)</span><br><span class="line">k++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>循环0次。为什么呢？原因是判断部分写成了k=0，<code>=</code>为赋值，使得条件为假，不进入for循环，代码执行0次。</p><h2 id="循环的应用：">循环的应用：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归求5的阶乘</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rst = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">rst = rst * i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, rst);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求1!+2!+……+5！之和</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rst = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">rst = rst * i;</span><br><span class="line">sum += rst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br></pre></td></tr></table></figure><h2 id="strcmp"><code>strcmp()</code></h2><p>C 库函数 <strong>int strcmp(const char *str1, const char *str2)</strong> 把 <strong>str1</strong> 所指向的字符串和 <strong>str2</strong> 所指向的字符串进行比较。</p><p>该函数返回值如下：</p><ul><li>如果返回值小于 0，则表示 str1 小于 str2。</li><li>如果返回值大于 0，则表示 str1 大于 str2。</li><li>如果返回值等于 0，则表示 str1 等于 str2。</li></ul><p>因此比较两个字符串值是否相同时，不能用<code>==</code>，应该用<code>strcmp()</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> str1[<span class="number">15</span>];</span><br><span class="line">   <span class="keyword">char</span> str2[<span class="number">15</span>];</span><br><span class="line">   <span class="keyword">int</span> ret;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">   <span class="built_in">strcpy</span>(str1, <span class="string">&quot;abcdef&quot;</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>(str2, <span class="string">&quot;ABCDEF&quot;</span>);</span><br><span class="line"> </span><br><span class="line">   ret = <span class="built_in">strcmp</span>(str1, str2);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;str1 小于 str2&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(ret &gt; <span class="number">0</span>) </span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;str1 大于 str2&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> </span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;str1 等于 str2&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rand-和srand"><code>rand()</code>和<code>srand()</code></h2><p><code>rand()</code>:Generates a pseudorandom number. 生成一个伪随机值</p><p><strong>int</strong> <strong>rand(</strong> <strong>void</strong> <strong>);</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,rand());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, rand());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, rand());</span><br></pre></td></tr></table></figure><p>运行上段代码，会发现每次运行结果都一样，这不是我们理想中的随机值。</p><p>Use the <a href="_crt_srand.htm">srand</a> function to seed the  pseudorandom-number generator before calling <strong>rand</strong>.</p><p>我们可以用<code>srand()</code>来使伪随机值变化。Sets a random starting point.</p><p><strong>void</strong> <strong>srand(</strong> <strong>unsigned</strong> <strong>int</strong> <em>seed</em>  <strong>);</strong></p><p>我们可以用时间作为参数，只要每次播种的时间不同，那么生成的种子就不同，最终的随机数也就不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    a = rand();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://c.biancheng.net/view/2043.html">C语言随机数生成教程，C语言rand和srand用法详解 (biancheng.net)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;分支语句&lt;/h1&gt;
&lt;h2 id=&quot;if-else语句&quot;&gt;if-else语句&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="c" scheme="https://youngsay.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>【JavaSE】类和对象</title>
    <link href="https://youngsay.cn/2022/01/14/Java-class-object/"/>
    <id>https://youngsay.cn/2022/01/14/Java-class-object/</id>
    <published>2022-01-14T03:40:41.000Z</published>
    <updated>2022-01-23T12:10:31.013Z</updated>
    
    <content type="html"><![CDATA[<p>类的成员：字段、方法、代码块、内部类和接口等</p><h1>字段</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String sex;</span><br></pre></td></tr></table></figure><p>age，name，sex这些类中方法外的变量，是字段、属性、成员变量（3种称呼均可）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//类的实例化</span></span><br><span class="line">        Person person=<span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(person.name);<span class="comment">//null</span></span><br><span class="line">        System.out.println(person.age);<span class="comment">//0</span></span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象的字段如果没有初始化，访问时会被设置成默认值。</p><blockquote><p>默认值规则</p><ul><li><p>对于各种数字类型, 默认值为 0.</p></li><li><p>对于 boolean 类型,默认值为 false.</p></li><li><p>对于引用类型(String, Array, 以及自定制类), 默认值为 null</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span><br><span class="line">at TestDemo.main(TestDemo.java:15)</span><br></pre></td></tr></table></figure><p>对null进行访问，会出现空指针异常。</p><h1>方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//字段、成员变量、属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String sex;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;正在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//类的实例化</span></span><br><span class="line">        Person person=<span class="keyword">new</span> Person(<span class="string">&quot;panghutx&quot;</span>);</span><br><span class="line">        person.study();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中的study()就是一个方法，和之前学到的方法（c语言为函数没什么区别）</p><pre><code>public Person(String name) &#123;    this.name = name;&#125;</code></pre><p>上段代码是一个构造方法</p><p>构造方法是一种特殊方法, 使用关键字new实例化新对象时会被自动调用, 用于完成初始化操作</p><p>语法规则：方法名与类名一致，没有返回值，支持重载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//带有一个参数的构造方法</span><br><span class="line">public Person()&#123;</span><br><span class="line">    System.out.println(&quot;I am the constructor method of one Parameter  &quot;);</span><br><span class="line">&#125;</span><br><span class="line">//带有3个参数的构造方法</span><br><span class="line">public Person(String name,int age,String sex)&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">    this.age=age;</span><br><span class="line">    this.sex=sex;</span><br><span class="line">    System.out.println(&quot;I am the constructor method of three Parameters  &quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//类的实例化</span><br><span class="line">Person person1=new Person();</span><br><span class="line">Person person2=new Person(&quot;panghutx&quot;,12,&quot;male&quot;);</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I am the constructor method of one Parameter  </span><br><span class="line"></span><br><span class="line">I am the constructor method of three Parameters</span><br></pre></td></tr></table></figure><h1>代码块</h1><p>使用<code>&#123;&#125;</code>定义的一段代码.</p><h2 id="构造代码块">构造代码块</h2><p>构造代码块(实例代码块)：定义在类中的代码块(不加修饰符)。构造代码块一般用于初始化实例成员变量。</p><p>实例代码块优先于构造函数执行。</p><h2 id="静态代码块">静态代码块</h2><p>使用static定义的代码块。一般用于初始化静态成员属性。</p><p>静态代码块不管生成多少个对象，其只会执行一次，且是最先执行的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">private</span> String name;<span class="comment">//实例成员变量</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line"> <span class="keyword">private</span> String sex; </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//静态成员变量 由类共享数据 方法区</span></span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123; </span><br><span class="line"> System.out.println(<span class="string">&quot;I am Person init()!&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> <span class="comment">//实例代码块</span></span><br><span class="line"> &#123; </span><br><span class="line"> <span class="keyword">this</span>.name = <span class="string">&quot;bit&quot;</span>; </span><br><span class="line"> <span class="keyword">this</span>.age = <span class="number">12</span>; </span><br><span class="line"> <span class="keyword">this</span>.sex = <span class="string">&quot;man&quot;</span>; </span><br><span class="line"> System.out.println(<span class="string">&quot;I am instance init()!&quot;</span>); </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="comment">//静态代码块</span></span><br><span class="line"> <span class="keyword">static</span> &#123; </span><br><span class="line"> count = <span class="number">10</span>;<span class="comment">//只能访问静态数据成员 </span></span><br><span class="line"> System.out.println(<span class="string">&quot;I am static init()!&quot;</span>); </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123; </span><br><span class="line"> System.out.println(<span class="string">&quot;name: &quot;</span>+name+<span class="string">&quot; age: &quot;</span>+age+<span class="string">&quot; sex: &quot;</span>+sex); </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123; </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"> Person p1 = <span class="keyword">new</span> Person(); </span><br><span class="line"> Person p2 = <span class="keyword">new</span> Person();<span class="comment">//静态代码块是否还会被执行？</span></span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I am static init()!</span><br><span class="line">I am instance init()!</span><br><span class="line">I am Person init()!</span><br><span class="line">I am instance init()!</span><br><span class="line">I am Person init()!</span><br></pre></td></tr></table></figure><h1>static关键字</h1><p>static修饰属性、方法、类、代码块</p><h2 id="static修饰属性">static修饰属性</h2><p>static修饰的属性不与对象绑定，所有类共享，只有一份，存在于方法区。</p><p>访问方法：类名<code>.</code>static属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestDemo t1 = <span class="keyword">new</span> TestDemo();</span><br><span class="line">        t1.a++;</span><br><span class="line">        TestDemo.count++;</span><br><span class="line">        System.out.println(t1.a);</span><br><span class="line">        System.out.println(TestDemo.count);</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">        TestDemo t2 = <span class="keyword">new</span> TestDemo();</span><br><span class="line">        t2.a++;</span><br><span class="line">        TestDemo.count++;</span><br><span class="line">        System.out.println(t2.a);</span><br><span class="line">        System.out.println(TestDemo.count);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">============</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="static修饰方法">static修饰方法</h2><p>static修饰的方法无需创建对象，可以由类直接调用，调用方法：类名<code>.</code>方法。静态方法只能访问静态变量，不能访问非静态变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count = <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//a = 10; error 不可以访问非静态数据成员</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestDemo.change()；<span class="comment">//无需创建实例对象 就可以调用</span></span><br><span class="line">        System.out.println(TestDemo.count);   </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>this</code>和<code>super</code>两个关键字不能在静态上下文中使用(this 是当前实例的引用, super是当前实例父类实例的引用, 也 是和当前实例相关).</p><h1>this关键字</h1><p><code>this</code>关键字代表当前对象的引用，不是当前对象。</p><p>一个对象的产生分为两步：</p><p>①为对象分配内存②调用合适的构造方法</p><p>对象的产生需要调用合适的构造方法，在构造方法内部可以使用<code>this</code>，对象还没有产生我们就已经使用了this，恰恰说明this不代表当前对象。</p><p>this的用法：</p><p><code>this()</code>:调用构造方法</p><p><code>this.data</code>:调用当前对象的属性</p><p><code>this.func()</code>:调用当前对象的方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;类的成员：字段、方法、代码块、内部类和接口等&lt;/p&gt;
&lt;h1&gt;字段&lt;/h1&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaSE" scheme="https://youngsay.cn/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>【JavaSE】数组的定义和使用</title>
    <link href="https://youngsay.cn/2022/01/12/Java-array/"/>
    <id>https://youngsay.cn/2022/01/12/Java-array/</id>
    <published>2022-01-12T14:40:41.000Z</published>
    <updated>2022-01-23T12:10:48.820Z</updated>
    
    <content type="html"><![CDATA[<h1>一维数组</h1><h2 id="一维数组的定义">一维数组的定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr1=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr2=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><h2 id="一维数组的遍历">一维数组的遍历</h2><p>method 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>method 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x:arr) &#123;</span><br><span class="line">    System.out.print(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>method 3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure><h2 id="理解引用">理解引用</h2><p><code>int[] arr=new int[]&#123;1,2,3&#125;</code>创建一个数组，变量<code>arr</code>是一个引用类型，里面只保存了一个整数（数组的起始内存地址），指向<code>&#123;1，2，3&#125;</code>的存储地址。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220117094641.png" alt="image-20220101215440175"></p><h2 id="初识JVM内存区域划分">初识JVM内存区域划分</h2><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220117095331.jpeg" alt="img"></p><ul><li>虚拟机栈：重点存储局部变量表，<code>int[] arr</code>这样的引用类型就存储在这里</li><li>堆：JVM管理的最大内存区域，new创建的对象都存储在这里，如<code>new int[]&#123;1，2，3&#125;</code></li><li>方法区：用于存储已被虚拟机加载的类信息、常量、静态变量等数据</li></ul><h1>二维数组</h1><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220117094651.png" alt="二维数组的内存结构"></p><h2 id="二维数组的定义">二维数组的定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] array=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[][] array1=<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;,&#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[][] array2=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h2 id="二维数组的遍历">二维数组的遍历</h2><p>method 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">        System.out.print(array[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>method 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span>[] x:array) &#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> y:x) &#123;</span><br><span class="line">        System.out.print(y);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>method 3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.deepToString(array));</span><br></pre></td></tr></table></figure><h1>数组练习</h1><h2 id="数组拷贝">数组拷贝</h2> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static int[] copyOf(int[] original,int newLength)</span><br></pre></td></tr></table></figure><p><code>original</code> - 要复制的数组<br><code>newLength</code> - 要返回的副本的长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static int[] copyOfRange(int[] original,int from,int to)</span><br></pre></td></tr></table></figure><p><code>original</code> - 要从中复制范围的数组<br><code>from</code> - 要复制的范围的初始索引（包括）<br><code>to</code> - 要复制的范围的最终索引（不包括）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr2=Arrays.copyOf(arr,arr.length);</span><br><span class="line">System.out.println(Arrays.toString(arr2)); <span class="comment">//&#123;1，2，3，4，5&#125;</span></span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">100</span>;</span><br><span class="line">System.out.println(Arrays.toString(arr2)); <span class="comment">//&#123;1，2，3，4，5&#125;</span></span><br><span class="line">System.out.println(Arrays.toString(arr)); <span class="comment">//&#123;100，2，3，4，5&#125;</span></span><br><span class="line"><span class="keyword">int</span>[] arr3=Arrays.copyOfRange(arr,<span class="number">1</span>,<span class="number">3</span>);  <span class="comment">// 拷贝[1,3)范围内的数组</span></span><br><span class="line">System.out.println(Arrays.toString(arr3)); <span class="comment">//&#123;2，3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="数组排序（冒泡排序）">数组排序（冒泡排序）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr=&#123;<span class="number">11</span>,<span class="number">2</span>,<span class="number">31</span>,<span class="number">14</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    bubbleSort(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> flg=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp=arr[j];</span><br><span class="line">                arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>]=tmp;</span><br><span class="line">                flg=<span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flg==<span class="keyword">false</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组排序（偶数在前，奇数在后）">数组排序（偶数在前，奇数在后）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    int[] arr=&#123;1,2,3,4,5&#125;;</span><br><span class="line">    transform(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line">public static void transform(int[] arr)&#123;</span><br><span class="line">    int left=0;</span><br><span class="line">    int right=arr.length-1;</span><br><span class="line">    while(left&lt;right)&#123;</span><br><span class="line">        while(left&lt;right&amp;&amp;arr[left]%2==0)&#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        //遇到奇数了</span><br><span class="line">        while(left&lt;right&amp;&amp;arr[right]%2!=0)&#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        //遇到偶数了</span><br><span class="line">        if(left&lt;right)&#123;</span><br><span class="line">            int tmp=arr[left];</span><br><span class="line">            arr[left]=arr[right];</span><br><span class="line">            arr[right]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;一维数组&lt;/h1&gt;
&lt;h2 id=&quot;一维数组的定义&quot;&gt;一维数组的定义&lt;/h2&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaSE" scheme="https://youngsay.cn/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>【C语言】基础语法的简单概括</title>
    <link href="https://youngsay.cn/2022/01/08/C-prime-knowledge/"/>
    <id>https://youngsay.cn/2022/01/08/C-prime-knowledge/</id>
    <published>2022-01-08T01:33:41.000Z</published>
    <updated>2022-01-23T12:10:05.005Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据类型">数据类型</h3><p>为了更加丰富地表达生活中的各种值，C语言中有不同的数据类型。每个数据类型有其占用空间的大小。我们用<code>sizeof</code>可以获取某个数据类型所占用空间的字节数。</p><p>下面这段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">short</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br></pre></td></tr></table></figure><p>在vs2019运行时，输出结果是：1244848</p><p>在linux平台运行时，结果是：1248848</p><p>对比发现，long在不同的编译器结果不同。<strong>c语言并没有规定long的大小，只是规定了sizeof(long)&gt;=sizeof(int)。</strong></p><h3 id="变量的作用域和生命周期">变量的作用域和生命周期</h3><ul><li>作用域：变量作用的范围。变量在哪里可以使用，哪里就是它的作用域。</li></ul><p>局部变量的作用域是变量所在的局部范围；全局变量的作用域是整个工程。</p><ul><li>生命周期：变量由创建到销毁这一时间段</li></ul><p>局部变量的生命周期是：局部变量的作用域；全局变量的生命周期是：整个程序。</p><h3 id="常量">常量</h3><h4 id="字面常量">字面常量</h4><h4 id="const修饰的常变量">const修饰的常变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line">pi = <span class="number">6.66</span>;</span><br><span class="line"><span class="comment">//报错信息：表达式必须是可修改的左值</span></span><br></pre></td></tr></table></figure><p>由const修饰的变量只是不可以再次修改，但本质仍是变量。</p><h4 id="define定义的标识符常量">define定义的标识符常量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>, MAX);</span><br></pre></td></tr></table></figure><h4 id="枚举常量">枚举常量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">MyEnum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">MALE,</span><br><span class="line">FAMALE,</span><br><span class="line">SECRET</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, MALE); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, FAMALE); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, SECRET); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串">字符串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> arr1[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> arr2[] = &#123; <span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220117091149.png" alt="image-20211227094115348"></p><p>字符串的结束标志是一个<code>\0</code>的转义字符。在计算字符串长度的时候<code>\0</code>不算作字符串内容。printf输出内容是<code>\0</code>之前的内容，arr2找不到<code>\0</code>出现了乱码，用<code>strlen</code>计算长度时也会出现随机值。</p><h3 id="转义字符">转义字符</h3><p>下段代码的输出结果是什么？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;c:\test\628\test.c&quot;</span>));</span><br></pre></td></tr></table></figure><p>输出结果是14。</p><p><code>\t</code>-----&gt;水平制表符</p><p><code>\62</code>—&gt;将<strong>8进制数</strong>数字62转换成10进制数字50</p><p>注：</p><p><code>\ddd</code>中ddd表示1-3位八进制数字，范围是0-7，所以上题中是\62，不是\628</p><p><code>\xdd</code>中dd表示2个十六进制数字。 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="string">&#x27;\x31&#x27;</span>); <span class="comment">//1</span></span><br><span class="line"><span class="comment">//将16进制数字31转换为10进制数字49，ascii码值代表的字符为 ‘1’</span></span><br></pre></td></tr></table></figure><h3 id="关键字">关键字</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span>  <span class="keyword">break</span>  <span class="keyword">case</span>  <span class="keyword">char</span>  <span class="keyword">const</span>  <span class="keyword">continue</span>  <span class="keyword">default</span>  <span class="keyword">do</span>  <span class="keyword">double</span> <span class="keyword">else</span>  <span class="keyword">enum</span> </span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">float</span>  <span class="keyword">for</span>  <span class="keyword">goto</span>  <span class="keyword">if</span>  <span class="keyword">int</span>  <span class="keyword">long</span>  <span class="keyword">register</span>   <span class="keyword">return</span>  <span class="keyword">short</span>  <span class="keyword">signed</span></span><br><span class="line"><span class="keyword">sizeof</span>  <span class="keyword">static</span> struct  <span class="keyword">switch</span>  <span class="keyword">typedef</span> <span class="keyword">union</span>  <span class="keyword">unsigned</span>  <span class="keyword">void</span>  <span class="keyword">volatile</span>  <span class="keyword">while</span></span><br></pre></td></tr></table></figure><h4 id="define">define</h4><h5 id="定义标识符常量">定义标识符常量</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[N] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="定义宏">定义宏</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a,b)(a)&gt;(b)?(a):(b)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, MAX(x,y)); <span class="comment">//20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="static">static</h4><blockquote><p>static是用来修饰变量和函数的</p><ol><li>修饰局部变量-称为静态局部变量</li><li>修饰全局变量-称为静态全局变量</li><li>修饰函数-称为静态函数</li></ol></blockquote><h5 id="修饰局部变量">修饰局部变量</h5><p>观察下面两段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">b++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b); <span class="comment">//12345</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">add();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">b++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b); <span class="comment">//11111</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">add();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比发现，static修饰局部变量改变了变量的生命周期，让静态局部变量出了作用域依然存在，到程序结束，生命周期才结束。</p><p>static修饰局部变量时，改变了局部变量的存储位置，将局部变量由堆区存储到静态区。</p><h5 id="修饰全局变量和函数">修饰全局变量和函数</h5><p>一个全局变量（函数）被static修饰，使得这个全局变量（函数）只能在本源文件内使用，不能在其他源文件内使<br>用。</p><p>全局变量（函数）具有外部链接属性，可以用extern外部引用，但被static修饰后，外部链接变成了内部链接，只能在当前源文件内部使用。</p><h4 id="typedef">typedef</h4><p>类型重命名：使类型名简单化，书写更方便</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将类型unsigned int重命名为uint_32，下次可以直接使用类型uint_32</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> uint_32;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">uint_32 b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体">结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义结构体类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">char</span> sex[<span class="number">6</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//d</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stu</span><span class="params">(struct MyStruct* ps)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%d,%s&quot;</span>, ps-&gt;name, ps-&gt;age, ps-&gt;sex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//结构体实例化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span> <span class="title">stu1</span> =</span> &#123;<span class="string">&quot;菜鸟小胖p&quot;</span>,<span class="number">20</span>,<span class="string">&quot;保密&quot;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span> <span class="title">stu2</span> =</span> &#123; <span class="string">&quot;小明&quot;</span>,<span class="number">101</span>,<span class="string">&quot;男&quot;</span> &#125;;</span><br><span class="line"><span class="comment">//打印结构体</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%d,%s\n&quot;</span>, stu1.name, stu1.age, stu1.sex);</span><br><span class="line"><span class="comment">//函数打印结构体</span></span><br><span class="line">stu(&amp;stu2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;数据类型&quot;&gt;数据类型&lt;/h3&gt;
&lt;p&gt;为了更加丰富地表达生活中的各种值，C语言中有不同的数据类型。每个数据类型有其占用空间的大小。我们用&lt;code&gt;sizeof&lt;/code&gt;可以获取某个数据类型所占用空间的字节数。&lt;/p&gt;
&lt;p&gt;下面这段代码：&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="c" scheme="https://youngsay.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>2021年度总结</title>
    <link href="https://youngsay.cn/2022/01/01/2021/"/>
    <id>https://youngsay.cn/2022/01/01/2021/</id>
    <published>2022-01-01T09:24:01.000Z</published>
    <updated>2022-01-23T12:07:34.465Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2022年来了，我又长大了一岁。</p><p>过去这一年，有快乐有失落，有收获有遗憾。</p><p>伤感的话不再说，遗憾的事不再提，新的一年继续好好生活。</p></blockquote><p>等等，在好好生活之前还是写一下年终总结吧，虽然今天已经是2022年……</p><p>回顾过去的这一年，**每一天都很平常，有时很快乐，有时会难过，也许有成长，难免有遗憾。**就在这平凡的一天又一天中，平凡的我又长大了一岁。</p><p>我没有写日记的习惯，很多事过去了就过去了，也许以后就再也不会想起。比如现在我想写一个年度总结，我不知道写些什么。好在有这样一个博客，或多或少能留存一些当时的记忆。</p><ul><li>2021年3月29日，新博客建成，发布第一篇博客：  <a href="https://www.youngsay.cn/2021/03/29/go-school/">新学期，新博客，新开始!</a></li></ul><p>在此之前也搭建过其他博客，总是写着写着感觉没啥意思，最终都删库跑路了。这是我持续时间最长的博客，我会一直让它活下去（希望别被打脸）。</p><p>回看第一篇博客，感慨万千。当时写到“我想学计算机相关专业，但无奈被调剂到了应用物理”，现在我已经是计算机科学与技术专业的学生了，2021/9/17 收到了转专业成功的消息，这个可以算是今年很开心的一件事。当时我提到“一直对编程感兴趣，尤其是前端”，现在我已经俩月没学前端了，2021/11/6 发的vue那篇笔记应该是我最后一次学习前端，也是刚开始接触vue。现在专业课开了Python和C语言，所以就把js先搁置了。最初学的时候就不扎实，现在再回看当时的笔记已经很陌生了。</p><ul><li>2021年6月2号，在听讲座后不久，发布了：  <a href="https://blog.wangyouwu.cn/2021/06/02/new/">讲座，机会，关系!</a></li></ul><p>这是听完学长讲座后不久写的一篇博客。学长是我原来学院信科专业的学生，考上了北理工研究生，讲座期间在字节跳动实习，现在怎样我也不知道了。当时我还加了他的微信，至今也没发过消息……学长的讲座对我影响很大，在听完他讲座后的一段时间学习很积极，但劲头持续时间不长（捂脸）。</p><ul><li>2021年7月21日，放暑假两周后发布： <a href="https://blog.wangyouwu.cn/2021/07/21/summer">暑假，目的论，自卑情结</a></li></ul><p>这篇博客是看了《被人讨厌的勇气》的读后感，对我有些许启发。我惰性很强，自制力很差，如果我再胸无大志的话，便是个完完全全快乐的人。但我又有燕雀之志（虽无鸿鹄之志，但也有些小追求），所以有时会很焦虑，只能做半个快乐的人。我因为自制力差，经常沉迷于网络而浪费很多时间，但我又有些追求，时而积极，时而消极。积极时我经常为过去的消极而懊悔，为失去了的宝贵时间而焦虑，但积极一阵后便又迎来了消极，周而复始，反反复复。</p><ul><li>2021年9月6日：大二上开学，2021年12月24日，本学期结束。</li></ul><p>这学期自我感觉良好，比以往更加充实快乐。</p><p>回顾这一年，当时的很多想法已经变了，当时的很多困惑现在已不再困惑，当时认为天大的事现在看来也许都不叫事。最后引用余华的一句话来结束本篇博客，“<strong>没有什么比时间更具有说服力了，因为时间无需通知我们就可以改变一切</strong>”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2022年来了，我又长大了一岁。&lt;/p&gt;
&lt;p&gt;过去这一年，有快乐有失落，有收获有遗憾。&lt;/p&gt;
&lt;p&gt;伤感的话不再说，遗憾的事不再提，新的一年继续好好生活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;等等，在好好生活之前还是写一下年终总结吧，虽然</summary>
      
    
    
    
    <category term="日常" scheme="https://youngsay.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>【JavaSE】方法及递归的使用</title>
    <link href="https://youngsay.cn/2021/11/23/Java-method/"/>
    <id>https://youngsay.cn/2021/11/23/Java-method/</id>
    <published>2021-11-23T05:05:41.000Z</published>
    <updated>2022-01-23T12:10:41.744Z</updated>
    
    <content type="html"><![CDATA[<h1>初识方法</h1><p>Java中的方法类似于c语言中的函数</p><p>观察下面代码，体会方法的好处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求两个数的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxTwoNum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求三个数的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxThreeNum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max=maxTwoNum(a,b);</span><br><span class="line">    <span class="keyword">return</span> maxTwoNum(max,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">23</span>,c=<span class="number">4</span>;</span><br><span class="line">    System.out.println(maxThreeNum(a,b,c));</span><br></pre></td></tr></table></figure><p>灵活使用方法，可以减少重复代码，使代码更简单。</p><h1>实参、形参的关系</h1><p><strong>Java当中只有按值传递</strong></p><p>分析如下代码：交换两个整型变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main5</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//交换两个整型变量的错误演示</span></span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">20</span>;</span><br><span class="line">    swap(a,b);</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为10 20，没有完成两数的交换。对于基础类型来说, 形参相当于实参的拷贝. 即 <strong>传值调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=arr[<span class="number">0</span>];</span><br><span class="line">    arr[<span class="number">0</span>]=arr[<span class="number">1</span>];</span><br><span class="line">    arr[<span class="number">1</span>]=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//交换两个整数的正确方法</span></span><br><span class="line">    <span class="keyword">int</span>[] arr=&#123;<span class="number">10</span>,<span class="number">20</span>&#125;;</span><br><span class="line">    swap1(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方案：传<strong>引用类型</strong>参数，如数组。</p><p>练习：求n个阶乘之和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">        sum += factor(j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factor</span><span class="params">(<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> rst=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=j;i++)&#123;</span><br><span class="line">        rst *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> num=scan.nextInt();</span><br><span class="line">    System.out.println(add(num));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>方法的重载（overload）：</h1><p>同一个方法名字, 提供不同版本的实现, 称为<strong>方法重载</strong></p><ul><li>方法名相同</li><li>返回值不做要求</li><li>参数列表不同（参数个数或参数类型不同）</li><li>同一个类当中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(sum(<span class="number">4</span>,<span class="number">6</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面试题：重载和重写的区别</p><h1>方法的递归</h1><p>一个方法在执行过程中调用自身, 就称为 “递归”。</p><p>递归把大问题化解成小问题，求解递归问题，要找到终止条件和递归公式。</p><h2 id="求n的阶乘">求n的阶乘</h2><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113145034.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factor</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n * factor(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(factor(<span class="number">4</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求n个阶乘之和">求n个阶乘之和</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factor</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i*factor(i-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> num=scan.nextInt();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num; i++) &#123;</span><br><span class="line">        sum+= factor(i);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="按顺序打印一个数字的每一位-例如-1234-打印出-1-2-3-4">按顺序打印一个数字的每一位(例如 1234 打印出 1 2 3 4)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">9</span>)&#123;</span><br><span class="line">        func(n/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(n%<span class="number">10</span>+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    func(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归求-1-2-3-…-10">递归求 1 + 2 + 3 + … + 10</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n+sum(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(sum(<span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写一个递归方法，输入一个非负整数，返回组成它的数字之和">写一个递归方法，输入一个非负整数，返回组成它的数字之和.</h2><p>例如，输入 1729, 则应该返回1+7+2+9， 它的和是19</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">9</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> n%<span class="number">10</span>+func(n/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(func(<span class="number">5211</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求斐波那契数列的第N项：">求斐波那契数列的第N项：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不建议用递归实现斐波那契数列，建议用循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n2=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n3=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        n3=n1+n2;</span><br><span class="line">        n1=n2;</span><br><span class="line">        n2=n3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(func(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考递归：横向思考，不要展开递归的代码</p><p>代码执行：纵向执行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;初识方法&lt;/h1&gt;
&lt;p&gt;Java中的方法类似于c语言中的函数&lt;/p&gt;
&lt;p&gt;观察下面代码，体会方法的好处。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaSE" scheme="https://youngsay.cn/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>【JavaSE】程序逻辑控制练习</title>
    <link href="https://youngsay.cn/2021/11/20/Java-logic-control/"/>
    <id>https://youngsay.cn/2021/11/20/Java-logic-control/</id>
    <published>2021-11-20T08:55:41.000Z</published>
    <updated>2022-01-23T12:10:37.970Z</updated>
    
    <content type="html"><![CDATA[<h4 id="输入1-7，输出工作日或休息日">输入1-7，输出工作日或休息日</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">switch</span>(scan.nextInt()) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;工作日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;休息日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>switch 中的值只能是 整数|枚举|字符|字符串，long、double、float、boolean不能作为switch参数的类型。</p></blockquote><h4 id="判断一个数是否为素数（3种方法）">判断一个数是否为素数（3种方法）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> num=scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;num;i++) &#123;</span><br><span class="line">    <span class="comment">//方法2：i&lt;=num/2</span></span><br><span class="line">    <span class="comment">//方法3：i&lt;=Math.sqrt(num);</span></span><br><span class="line">    <span class="keyword">if</span>(num%i==<span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(num+<span class="string">&quot;不是素数&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=num)&#123;</span><br><span class="line">    System.out.println(num+<span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印100以内的所有素数">打印100以内的所有素数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;=<span class="number">100</span>;j++) &#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;j;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j%i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">        System.out.println(j+<span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出1000-2000之间的所有闰年">输出1000-2000之间的所有闰年</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> year=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">for</span>(year=<span class="number">1000</span>;year&lt;=<span class="number">2000</span>;year++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>||year%<span class="number">400</span>==<span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(year+<span class="string">&quot;是闰年&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="输出乘法口诀表">输出乘法口诀表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++) &#123; <span class="comment">//i--行数</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)&#123; <span class="comment">//j--列数  列数的多少取决于第一行 第一行有一列，第二行有两列，……</span></span><br><span class="line">        System.out.print(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+i*j+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求两个数的最大公约数">求两个数的最大公约数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> a=scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> b=scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> c=b;</span><br><span class="line"><span class="keyword">while</span>(a%b!=<span class="number">0</span>) &#123;</span><br><span class="line">    c=a%b;</span><br><span class="line">    a=b;</span><br><span class="line">    b=c;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(a+<span class="string">&quot;和&quot;</span>+b+<span class="string">&quot;的最大公约数是&quot;</span>+c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="计算1-1-1-2-1-3……-1-99-1-100的值">计算1/1-1/2+1/3……+1/99-1/100的值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">100</span>;j++) &#123;</span><br><span class="line">    sum += <span class="number">1.0</span>/j*flag;</span><br><span class="line">    flag=-flag;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure><h4 id="编写程序数一下1到100的所有整数中出现多少个数字9">编写程序数一下1到100的所有整数中出现多少个数字9</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">10</span>==<span class="number">9</span>||i/<span class="number">10</span>==<span class="number">9</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><h4 id="求出0-999之间的所有”水仙花”">求出0~999之间的所有”水仙花”</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">100</span>;i&lt;<span class="number">1000</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(Math.pow(i%<span class="number">10</span>,<span class="number">3</span>)+Math.pow(i/<span class="number">10</span>%<span class="number">10</span>,<span class="number">3</span>)+Math.pow(i/<span class="number">100</span>%<span class="number">10</span>,<span class="number">3</span>)==i) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>改进：求出1-6位数的自幂数</p><blockquote><p>附：其他位数的自幂数名字</p><p>一位自幂数：独身数；三位自幂数：水仙花数；四位自幂数：四叶玫瑰数；五位自幂数：五角星数；六位自幂数：六合数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9999999</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp=i;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//p</span></span><br><span class="line">    <span class="keyword">while</span> (temp!=<span class="number">0</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        temp=temp/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp=i;</span><br><span class="line">    <span class="keyword">while</span>(temp!=<span class="number">0</span>)&#123;</span><br><span class="line">        sum += Math.pow(temp%<span class="number">10</span>,count);</span><br><span class="line">        temp=temp/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum==i)&#123;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写代码模拟三次密码输入场景，最多输入3次">编写代码模拟三次密码输入场景，最多输入3次</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String input = scan.next();</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(count=<span class="number">2</span>;count&gt;<span class="number">0</span>;count--) &#123;</span><br><span class="line">    <span class="keyword">if</span>(input.equals(<span class="string">&quot;zzz123&quot;</span>))&#123; <span class="comment">//🔺不能用=</span></span><br><span class="line">        System.out.println(<span class="string">&quot;密码正确，登陆成功&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入错误，你还有&quot;</span>+count+<span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    input = scan.next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(count&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;三次均输错，退出程序&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输入一个数，输出该数二进制中1的个数：">输入一个数，输出该数二进制中1的个数：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> num=scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(((num&gt;&gt;i)&amp;<span class="number">1</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(num+<span class="string">&quot;二进制中1的个数为：&quot;</span>+count);</span><br></pre></td></tr></table></figure><p>改进：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113095208.png" alt="image-20211123124426921"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">    n=n&amp;(n-<span class="number">1</span>);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;输入1-7，输出工作日或休息日&quot;&gt;输入1-7，输出工作日或休息日&lt;/h4&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaSE" scheme="https://youngsay.cn/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>【JavaSE】数据类型与运算符</title>
    <link href="https://youngsay.cn/2021/11/20/Java-data-type/"/>
    <id>https://youngsay.cn/2021/11/20/Java-data-type/</id>
    <published>2021-11-20T03:27:41.000Z</published>
    <updated>2022-04-23T06:05:09.476Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初识Java">初识Java</h3><h4 id="第一个java程序">第一个java程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>一个java文件中，只能有一个public类，且类名要与文件相同。</p></li><li><p>类存在于源文件里面；方法存在于类中；语句存在于方法中。</p></li><li><p>类名要采用大驼峰形式（首字母均大写）命名。</p></li></ul><p>面试问题：</p><p>main方法为什么是static：main方法是程序的入口，如果不是静态的话，要启动就必须创建一个实例，但是main是程序入口，创建一个实例又得从main开始。如果一个方法不是静态的，则要先实例化该类，比如要这样 test t=new test();<br>然后才能调用 t.main(); 而这对于运行一个程序的主函数来说是不现实的，所以比如把main函数定义为static，使t.main()可以直接被调用。</p><p>String[] args的作用是什么：运行时命令行参数，例如我运行时输入这条指令：<code>java HelloWorld panghutx is a stupid bird</code>，会将panghutx、is、a、stupid、bird存入args这个字符串数组。</p><h4 id="如何运行java程序">如何运行java程序</h4><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083809.png" alt="image-20211120114709234"></p><p>大致过程就是，我们写好的.java文件（源文件）被编译器编译后变成.class文件（<strong>字节码</strong>），然后被JVM的类加载器加载到内存，通过字节码校验器去做一些校验，校验通过后交由<strong>解释器</strong>将字节码文件解释成计算机能够识别的机器指令。</p><p>面试问题：双亲委派模型、类加载器</p><p>JDK Java开发工具 ；JRE Java运行环境 ；JVM Java虚拟机</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083822.png" alt="image-20211120114912827"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zzz</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;zzz&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083828.png" alt="image-20211120115549069"></p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113084529.png" alt="image-20211120115606886"></p><p>Java中，一个类就会生成一个字节码文件。</p><p>为何这样设置？为了方便使用，如果需要HelloWorld这个类，就加载对应的字节码文件。</p><h3 id="变量和类型">变量和类型</h3><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083844.jpeg" alt="在这里插入图片描述"></p><p>变量均存储在内存中。</p><h4 id="变量">变量</h4><h5 id="整形">整形</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">10</span>; <span class="comment">//定义一个整形变量</span></span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><p>一个int变量占4个字节。</p><blockquote><p>什么是字节?</p><p>字节是计算机中表示空间大小的基本单位. 计算机使用二进制表示数据. 我们认为 8 个二进制位(bit) 为一个字节(Byte). 我们平时的计算机为 8GB 内存, 意思是 8G 个字节. 其中 1KB = 1024 Byte, 1MB = 1024 KB, 1GB = 1024 MB. 所以 8GB 相当于 80 多亿个字节</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.MAX_VALUE); <span class="comment">// 2147483647</span></span><br><span class="line">System.out.println(Integer.MIN_VALUE); <span class="comment">// -2147483648</span></span><br></pre></td></tr></table></figure><p>4 个字节表示的数据范围是 -2^31 -&gt; 2^31-1 , 也就大概是 -21亿 到 +21亿</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> maxValue = Integer.MAX_VALUE;</span><br><span class="line">System.out.println(maxValue+<span class="number">1</span>); <span class="comment">// -2147483648</span></span><br><span class="line"><span class="keyword">int</span> minValue = Integer.MIN_VALUE;</span><br><span class="line">System.out.println(minValue-<span class="number">1</span>); <span class="comment">// 2147483647</span></span><br></pre></td></tr></table></figure><p>如果运算的结果超出了 int 的最大范围, 就会出现溢出的情况。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083849.png" alt="image-20211120121410693"></p><p>图：int的取值范围</p><h5 id="长整型">长整型</h5><p>long占8个字节，取值范围是-2^63—2^63-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> num=<span class="number">10L</span>;</span><br><span class="line">System.out.println(num);</span><br><span class="line">System.out.println(Long.MAX_VALUE);</span><br><span class="line">System.out.println(Long.MIN_VALUE);</span><br></pre></td></tr></table></figure><p>初始化长整型变量是记得在数字后面加上L</p><h5 id="双精度浮点型">双精度浮点型</h5><p>double占8个字节，浮点数在内存中的存储与整形不同，不能单纯用2^n表示其取值范围，且浮点数的存储会存在精度误差。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> num = <span class="number">1.1</span>;</span><br><span class="line">System.out.println(num * num) <span class="comment">// 1.2100000000000002</span></span><br></pre></td></tr></table></figure><h5 id="单精度浮点型">单精度浮点型</h5><p>float占4个字节，初始化时要在数字后面加上f</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> num = <span class="number">1.0f</span>;    <span class="comment">// 写作 1.0F 也可以</span></span><br><span class="line">System.out.println(num);</span><br></pre></td></tr></table></figure><h5 id="字符型">字符型</h5><p>char在java中占<strong>2</strong>个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch=<span class="string">&#x27;A&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>Java 中使用<code>单引号 + 单个字母 </code>的形式表示字符字面值.</li><li><strong>计算机中的字符本质上是一个整数. 在 C 语言中使用 ASCII 表示字符, 而 Java 中使用 Unicode 表示字符. 因此一个字符占用两个字节, 表示的字符种类更多, 包括中文.</strong></li><li>使用一个汉字表示一个字符时，报错是要用<code>javac -encoding UTF-8 文件名.java</code></li></ul><h5 id="字节型">字节型</h5><p>byte占1个字节，范围大小是-128–&gt;127</p><p>byte类型相加减时会进行整形提升，要用int保存。</p><h5 id="短整型">短整型</h5><p>short占2个字节，范围大小是-2^15-2^15-1，范围较小，一般不使用。</p><h5 id="布尔型">布尔型</h5><p>boolean只有两种取值，true或false。<strong>Java中的布尔型和整形不能相互转换</strong>，不能用1或0表示布尔型。</p><h5 id="字符串型">字符串型</h5><p>String占8个字节，Java 使用 <code>双引号 + 若干字符</code> 的方式表示字符串字面值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;胖虎同学&quot;</span>;</span><br></pre></td></tr></table></figure><p>使用<code>+</code>可以进行字符串的拼接，任何类型的变量与字符串进行拼接时，都会转换成字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">21</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+a+b); <span class="comment">//2021</span></span><br></pre></td></tr></table></figure><h5 id="总结">总结</h5><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083857.png" alt="image-20211120154001169"></p><h4 id="常量">常量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">a = <span class="number">20</span>; <span class="comment">// 编译出错. 提示 无法为最终变量a分配值</span></span><br></pre></td></tr></table></figure><p>常量不能在程序运行过程中发生修改。</p><h4 id="类型转换">类型转换</h4><ul><li>不同数字类型的变量之间赋值, 表示范围更小的类型能隐式转换成范围较大的类型</li><li>如果需要把范围大的类型赋值给范围小的, 需要强制类型转换, 但是可能精度丢失。不相关的类型不能进行类型转换。</li><li>将一个字面值常量进行赋值的时候, Java 会自动针对数字范围进行检查.</li></ul><h4 id="总结-2">总结</h4><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083903.png" alt="image-20211120154336948"></p><h3 id="运算符">运算符</h3><h4 id="算术运算符">算术运算符</h4><p><code>+-*/%</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span>/<span class="number">2</span>); <span class="comment">// 2</span></span><br><span class="line">System.out.println(<span class="number">5.0</span>/<span class="number">2</span>); <span class="comment">//2.5</span></span><br><span class="line">System.out.println((<span class="keyword">double</span>)<span class="number">5</span>/<span class="number">2</span>); <span class="comment">//2.5</span></span><br><span class="line">System.out.println((<span class="keyword">double</span>)(<span class="number">5</span>/<span class="number">2</span>)); <span class="comment">// 2.0</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span>%<span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line">System.out.println(-<span class="number">5</span>%<span class="number">2</span>); <span class="comment">//-1</span></span><br><span class="line">System.out.println(<span class="number">5</span>%-<span class="number">2</span>); <span class="comment">//1</span></span><br><span class="line">System.out.println(-<span class="number">5</span>%-<span class="number">2</span>); <span class="comment">//-1</span></span><br><span class="line"><span class="comment">//正负看被除数</span></span><br></pre></td></tr></table></figure><p>Java中，不仅仅可以对 int 求模, 也能对 double 来求模。</p><p>值得注意的是，下图中i=10，而c语言是11。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083909.png" alt="image-20211120172159321"></p><h4 id="增量运算符">增量运算符</h4><p><code>+= -= *= %=</code></p><p>可以自动进行类型转换</p><h4 id="关系运算符">关系运算符</h4><p><code>== != &lt; &gt; &lt;= &gt;=</code></p><p>关系运算符表达式返回值都是布尔值。</p><h4 id="逻辑运算符">逻辑运算符</h4><p><code>&amp;&amp; || !</code></p><p>Java中，逻辑非！只能作用于布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">20</span>;</span><br><span class="line">System.out.println(!a &lt; b);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083917.png" alt="image-20211120165938626"></p><h4 id="位运算符">位运算符</h4><p><code>&amp; | ~ ^</code></p><h4 id="移位运算符">移位运算符</h4><p><code> &gt;&gt; &lt;&lt; &gt;&gt;&gt;</code></p><p>无符号右移 &gt;&gt;&gt;：最右侧位不要了, 最左侧补 0.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0xffffffff</span>;</span><br><span class="line">System.out.printf(<span class="string">&quot;%x\n&quot;</span>, a &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 运行结果(注意, 是按十六进制打印的) 7fffffff </span></span><br></pre></td></tr></table></figure><blockquote><ul><li>左移 1 位, 相当于原数字 * 2. 左移 N 位, 相当于原数字 * 2 的N次方</li><li>右移 1 位, 相当于原数字 / 2. 右移 N 位, 相当于原数字 / 2 的N次方</li><li>由于计算机计算移位效率高于计算乘除, 当某个代码正好乘除 2 的N次方的时候可以用移位运算代替</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;初识Java&quot;&gt;初识Java&lt;/h3&gt;
&lt;h4 id=&quot;第一个java程序&quot;&gt;第一个java程序&lt;/h4&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaSE" scheme="https://youngsay.cn/tags/JavaSE/"/>
    
  </entry>
  
</feed>
