<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胖虎同学</title>
  
  <subtitle>生活学习类个人博客</subtitle>
  <link href="https://youngsay.cn/atom.xml" rel="self"/>
  
  <link href="https://youngsay.cn/"/>
  <updated>2022-01-25T15:15:12.366Z</updated>
  <id>https://youngsay.cn/</id>
  
  <author>
    <name>胖虎同学</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言实现简单的井字棋游戏</title>
    <link href="https://youngsay.cn/2022/01/25/Tic-Tac-Toe/"/>
    <id>https://youngsay.cn/2022/01/25/Tic-Tac-Toe/</id>
    <published>2022-01-25T14:42:01.000Z</published>
    <updated>2022-01-25T15:15:12.366Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>井字棋，英文名叫Tic-Tac-Toe，是一种在3*3格子上进行的连珠游戏，和五子棋类似，由于棋盘一般不画边框，格线排成井字故得名。</p></blockquote><p>想必大家小时候都玩过井字棋,今天分享大家一个用C语言做简单的井字棋游戏的教程,通过井字棋游戏,既能回忆起童年的美好,也能熟悉简单的C语言语法.</p><p>游戏演示：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220125231500.gif" alt="动画"></p><p>我们准备三个文件,分别为<code>game.c</code>,<code>test.c</code>,<code>game.h</code></p><p><code>game.c</code>文件用来写实现游戏功能的各个函数代码,<code>test.c</code>文件写游戏的总流程,<code>game.h</code>文件用来声明函数和初始值.</p><p>先来看<code>test.c</code>文件</p><p>文件内有三个函数,分别为菜单,游戏,主函数.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------1.开始游戏-----\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------2.退出游戏-----\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单很简单,就是开始游戏和退出游戏.我们可以在主函数中switch-case语句实现,输入1开始游戏,输入2退出游戏,其他输入均提示重新输入.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">menu();</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">int</span> input = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入选项\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">switch</span> (input)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">game();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>玩家输入1后进入游戏函数,游戏函数内对函数进行调用,函数的声明放在game.h头文件,定义放在game.c源文件.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">game</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> rst = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> board[ROW][COL] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//初始化棋盘</span></span><br><span class="line">InitBoard(board,ROW,COL);</span><br><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line">DisplayBoard(board, ROW, COL);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//玩家下棋</span></span><br><span class="line">player_move(board, ROW, COL);</span><br><span class="line">DisplayBoard(board, ROW, COL);</span><br><span class="line"><span class="comment">//判断输赢</span></span><br><span class="line">rst = isWinner(board,ROW,COL);</span><br><span class="line"><span class="keyword">if</span> (rst != <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//电脑下棋</span></span><br><span class="line">computer_move(board, ROW, COL);</span><br><span class="line">DisplayBoard(board, ROW, COL);</span><br><span class="line">rst = isWinner(board, ROW, COL);</span><br><span class="line"><span class="keyword">if</span> (rst != <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (rst == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;恭喜你，赢得了胜利！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (rst == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;很遗憾，你输了！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;平局了\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来简单说一下我们要实现的功能.首先,要初始化一个棋盘,我们可以用用三行三列的数组.玩家开始游戏,要将空棋盘显示给玩家,这时我们要打印棋盘.接着玩家下棋,输入坐标,将坐标处放上棋子,我们用*代表玩家的棋子,玩家下好后电脑下棋,用#代表电脑.当玩家或电脑先实现三个棋子连在一起,游戏结束.</p><p>下面是game.h头文件,文件内时头文件的引用,数据的初始化,游戏函数的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化棋盘的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitBoard</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayBoard</span><span class="params">(<span class="keyword">char</span> board[ROW][COL],<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span>;</span><br><span class="line"><span class="comment">//玩家下棋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">player_move</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br><span class="line"><span class="comment">//电脑下棋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">computer_move</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br><span class="line"><span class="comment">//判断输赢</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">isWinner</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;</span><br></pre></td></tr></table></figure><p>下面是game.c文件的各个函数的定义</p><p>首先是初始化棋盘,便利3x3的数组,将数组内的元素置为空格字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化棋盘的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitBoard</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">board[i][j] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是打印棋盘,打印棋盘很简单,但为了美观要将棋盘打印为井字,所以要花一些巧思</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayBoard</span><span class="params">(<span class="keyword">char</span> board[ROW][COL],<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %c &quot;</span>, board[i][j]);</span><br><span class="line"><span class="keyword">if</span> (j &lt; col - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (i &lt; row - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (j &lt; col - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是玩家下棋,当玩家输入的坐标小于1或大于3的,提示坐标非法,当坐标合法且该位置没有棋子将该坐标放上棋子*</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//玩家下棋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">player_move</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;玩家下棋&gt;\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">1</span> || x&gt;row || y&lt;<span class="number">1</span> || y&gt;col) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;坐标非法\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (board[x - <span class="number">1</span>][y - <span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">board[x - <span class="number">1</span>][y - <span class="number">1</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是电脑下棋,使用rand()和srand()生成随机值,rand()%row生成的值是0-2,+1后就是1-3,纵坐标同理,如果坐标处没有棋子放上棋子#</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//电脑下棋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">computer_move</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;电脑下棋\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = rand() % row;</span><br><span class="line">y = rand() % col;</span><br><span class="line"><span class="keyword">if</span>(board[x][y] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">board[x][y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最关键一步就是判断输赢,判断输赢无非就是行,列和对角线.除了输赢,还有平局,isPeace函数是用来判断平局,遍历棋盘,如果有至少一处为空,继续游戏,如果棋盘满了则为平局.返回*  玩家赢,返回#  电脑赢,返回Q  平局,返回C  继续.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPeace</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断输赢</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">isWinner</span><span class="params">(<span class="keyword">char</span> board[ROW][COL], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断行</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][<span class="number">0</span>] == board[i][<span class="number">1</span>] &amp;&amp; board[i][<span class="number">1</span>] == board[i][<span class="number">2</span>] &amp;&amp; board[i][<span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> board[i][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断列</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][j] == board[<span class="number">1</span>][j] &amp;&amp; board[<span class="number">1</span>][j] == board[<span class="number">2</span>][j] &amp;&amp; board[<span class="number">1</span>][j] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断对角线</span></span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">0</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">0</span>] == board[<span class="number">2</span>][<span class="number">2</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">0</span>] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">2</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">2</span>] == board[<span class="number">2</span>][<span class="number">0</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">2</span>] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> board[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断平局</span></span><br><span class="line"><span class="keyword">if</span> (isPeace(board, row, col) == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是一个用c语言制作简单的井字棋的介绍.代码和逻辑都很简单,只需要一些基础的c语言知识便可实现.技术有限,哪里有请指正,任何问题欢迎评论区留言交流.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;井字棋，英文名叫Tic-Tac-Toe，是一种在3*3格子上进行的连珠游戏，和五子棋类似，由于棋盘一般不画边框，格线排成井字故得名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;想必大家小时候都玩过井字棋,今天分享大家一个用C语言做简单的井字棋游戏的</summary>
      
    
    
    
    <category term="分享" scheme="https://youngsay.cn/categories/%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>【C语言】分支和循环语句常见问题</title>
    <link href="https://youngsay.cn/2022/01/16/C-branch-loop/"/>
    <id>https://youngsay.cn/2022/01/16/C-branch-loop/</id>
    <published>2022-01-16T06:33:41.000Z</published>
    <updated>2022-01-23T12:10:18.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h1><h2 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;panghu\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;胖虎\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;panghu\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：panghu</span></span><br></pre></td></tr></table></figure><p>观察上面两段代码，输出结果分别是什么？</p><p>由此可知：else的匹配规则：else总是与<strong>离它最近的未匹配的</strong>if匹配，与缩进无关。</p><h2 id="switch-case语句"><a href="#switch-case语句" class="headerlink" title="switch-case语句"></a>switch-case语句</h2><p>switch()括号内是整形表达式。</p><p>case后接整型常量表达式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span> , &amp;i);</span><br><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;工作日\n&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;休息日\n&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>思考下面代码，输出结果是什么？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">switch</span> (n)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            m++;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            n++;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">switch</span> (n)</span><br><span class="line">           &#123;<span class="comment">//switch允许嵌套使用</span></span><br><span class="line">             <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    n++;</span><br><span class="line">             <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    m++;</span><br><span class="line">                    n++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            m++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;m = %d, n = %d\n&quot;</span>, m, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5 3</span></span><br></pre></td></tr></table></figure><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="continue比较"><a href="#continue比较" class="headerlink" title="continue比较"></a>continue比较</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i); </span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察上端代码，打印结果是什么？</p><p>结果为1234，然后死循环。</p><p><code>continue</code>是结束本次循环，进入下次循环。当i=5时进入if语句，然后跳出，然后再进入，以此往复。</p><p>再看下面的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是12346789，与while循环相比，这次遇到continue跳出本次循环后能够让<code>i</code>自增，不会进入死循环。</p><h2 id="getchar-和putchar"><a href="#getchar-和putchar" class="headerlink" title="getchar()和putchar()"></a><code>getchar()</code>和<code>putchar()</code></h2><p>缓存区问题：</p><pre><code>char arr[20] = &#123; 0 &#125;;printf(&quot;请输入密码\n&quot;);scanf(&quot;%s&quot; , arr);printf(&quot;请确认密码 Y/N\n&quot;);int ch = getchar();if (&#39;Y&#39; == ch) &#123;    printf(&quot;确认成功\n&quot;);&#125;else &#123;    printf(&quot;确认失败\n&quot;);&#125;</code></pre><p>当我输入1234时，还没等确认，直接提示确认失败。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220117092528.png" alt="image-20220115154137025"></p><p>原因是当我输入1234后会按回车换行，也就是<code>\n</code>，此时缓存区会存在<code>\n</code>，<code>getchar()</code>会从缓存区取出<code>\n</code>，ch=<code>\n</code>，不等于Y，弹出确认失败。</p><p>如何解决这种问题？</p><p><strong>方法1：</strong>在<code>scanf</code>语句后面加上<code>getchar()</code>来取出<code>\n</code>，这样ch再访问缓存区就为空了。但这样也有弊端，例如当我输入1234 abcd时又出现错误了。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220117092537.png" alt="image-20220115154856069"></p><p>原因是输入格式%s只读取空格之前的内容，而<code>getchar()</code>只能读取一个字符，所以ch再次读取时发现缓存区还有其他字符且不是Y，提示确认失败·。</p><p><strong>方法2：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> arr[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span> , arr);</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((tmp = getchar()) != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请确认密码 Y/N\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> ch = getchar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;Y&#x27;</span> == ch) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;确认成功\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;确认失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用while循环，多次读取，直到缓存区为空，跳出循环。</p><h2 id="赋值和判断"><a href="#赋值和判断" class="headerlink" title="赋值和判断"></a>赋值和判断</h2><p>观察下面代码，该代码循环几次？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, k = <span class="number">0</span>; k = <span class="number">0</span>; i++, k++)</span><br><span class="line">k++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>循环0次。为什么呢？原因是判断部分写成了k=0，<code>=</code>为赋值，使得条件为假，不进入for循环，代码执行0次。</p><h2 id="循环的应用："><a href="#循环的应用：" class="headerlink" title="循环的应用："></a>循环的应用：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归求5的阶乘</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rst = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">rst = rst * i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, rst);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求1!+2!+……+5！之和</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rst = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">rst = rst * i;</span><br><span class="line">sum += rst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br></pre></td></tr></table></figure><h2 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp()"></a><code>strcmp()</code></h2><p>C 库函数 <strong>int strcmp(const char *str1, const char *str2)</strong> 把 <strong>str1</strong> 所指向的字符串和 <strong>str2</strong> 所指向的字符串进行比较。</p><p>该函数返回值如下：</p><ul><li>如果返回值小于 0，则表示 str1 小于 str2。</li><li>如果返回值大于 0，则表示 str1 大于 str2。</li><li>如果返回值等于 0，则表示 str1 等于 str2。</li></ul><p>因此比较两个字符串值是否相同时，不能用<code>==</code>，应该用<code>strcmp()</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> str1[<span class="number">15</span>];</span><br><span class="line">   <span class="keyword">char</span> str2[<span class="number">15</span>];</span><br><span class="line">   <span class="keyword">int</span> ret;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">   <span class="built_in">strcpy</span>(str1, <span class="string">&quot;abcdef&quot;</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>(str2, <span class="string">&quot;ABCDEF&quot;</span>);</span><br><span class="line"> </span><br><span class="line">   ret = <span class="built_in">strcmp</span>(str1, str2);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;str1 小于 str2&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(ret &gt; <span class="number">0</span>) </span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;str1 大于 str2&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> </span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;str1 等于 str2&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rand-和srand"><a href="#rand-和srand" class="headerlink" title="rand()和srand()"></a><code>rand()</code>和<code>srand()</code></h2><p><code>rand()</code>:Generates a pseudorandom number. 生成一个伪随机值</p><p><strong>int</strong> <strong>rand(</strong> <strong>void</strong> <strong>);</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,rand());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, rand());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, rand());</span><br></pre></td></tr></table></figure><p>运行上段代码，会发现每次运行结果都一样，这不是我们理想中的随机值。</p><p>Use the <a href="_crt_srand.htm">srand</a> function to seed the  pseudorandom-number generator before calling <strong>rand</strong>.</p><p>我们可以用<code>srand()</code>来使伪随机值变化。Sets a random starting point.</p><p><strong>void</strong> <strong>srand(</strong> <strong>unsigned</strong> <strong>int</strong> <em>seed</em>  <strong>);</strong></p><p>我们可以用时间作为参数，只要每次播种的时间不同，那么生成的种子就不同，最终的随机数也就不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    a = rand();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://c.biancheng.net/view/2043.html">C语言随机数生成教程，C语言rand和srand用法详解 (biancheng.net)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分支语句&quot;&gt;&lt;a href=&quot;#分支语句&quot; class=&quot;headerlink&quot; title=&quot;分支语句&quot;&gt;&lt;/a&gt;分支语句&lt;/h1&gt;&lt;h2 id=&quot;if-else语句&quot;&gt;&lt;a href=&quot;#if-else语句&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="c" scheme="https://youngsay.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>【JavaSE】类和对象</title>
    <link href="https://youngsay.cn/2022/01/14/Java-class-object/"/>
    <id>https://youngsay.cn/2022/01/14/Java-class-object/</id>
    <published>2022-01-14T03:40:41.000Z</published>
    <updated>2022-01-23T12:10:31.013Z</updated>
    
    <content type="html"><![CDATA[<p>类的成员：字段、方法、代码块、内部类和接口等</p><h1 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String sex;</span><br></pre></td></tr></table></figure><p>age，name，sex这些类中方法外的变量，是字段、属性、成员变量（3种称呼均可）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//类的实例化</span></span><br><span class="line">        Person person=<span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(person.name);<span class="comment">//null</span></span><br><span class="line">        System.out.println(person.age);<span class="comment">//0</span></span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象的字段如果没有初始化，访问时会被设置成默认值。</p><blockquote><p>默认值规则</p><ul><li><p>对于各种数字类型, 默认值为 0. </p></li><li><p>对于 boolean 类型,默认值为 false. </p></li><li><p>对于引用类型(String, Array, 以及自定制类), 默认值为 null</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span><br><span class="line">at TestDemo.main(TestDemo.java:15)</span><br></pre></td></tr></table></figure><p>对null进行访问，会出现空指针异常。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//字段、成员变量、属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String sex;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;正在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//类的实例化</span></span><br><span class="line">        Person person=<span class="keyword">new</span> Person(<span class="string">&quot;panghutx&quot;</span>);</span><br><span class="line">        person.study();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中的study()就是一个方法，和之前学到的方法（c语言为函数没什么区别）</p><pre><code>public Person(String name) &#123;    this.name = name;&#125;</code></pre><p>上段代码是一个构造方法</p><p>构造方法是一种特殊方法, 使用关键字new实例化新对象时会被自动调用, 用于完成初始化操作</p><p>语法规则：方法名与类名一致，没有返回值，支持重载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//带有一个参数的构造方法</span><br><span class="line">public Person()&#123;</span><br><span class="line">    System.out.println(&quot;I am the constructor method of one Parameter  &quot;);</span><br><span class="line">&#125;</span><br><span class="line">//带有3个参数的构造方法</span><br><span class="line">public Person(String name,int age,String sex)&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">    this.age=age;</span><br><span class="line">    this.sex=sex;</span><br><span class="line">    System.out.println(&quot;I am the constructor method of three Parameters  &quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//类的实例化</span><br><span class="line">Person person1=new Person();</span><br><span class="line">Person person2=new Person(&quot;panghutx&quot;,12,&quot;male&quot;);</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I am the constructor method of one Parameter  </span><br><span class="line"></span><br><span class="line">I am the constructor method of three Parameters</span><br></pre></td></tr></table></figure><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>使用<code>&#123;&#125;</code>定义的一段代码.</p><h2 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h2><p>构造代码块(实例代码块)：定义在类中的代码块(不加修饰符)。构造代码块一般用于初始化实例成员变量。</p><p> 实例代码块优先于构造函数执行。</p><h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><p>使用static定义的代码块。一般用于初始化静态成员属性。</p><p>静态代码块不管生成多少个对象，其只会执行一次，且是最先执行的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">private</span> String name;<span class="comment">//实例成员变量</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line"> <span class="keyword">private</span> String sex; </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//静态成员变量 由类共享数据 方法区</span></span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123; </span><br><span class="line"> System.out.println(<span class="string">&quot;I am Person init()!&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> <span class="comment">//实例代码块</span></span><br><span class="line"> &#123; </span><br><span class="line"> <span class="keyword">this</span>.name = <span class="string">&quot;bit&quot;</span>; </span><br><span class="line"> <span class="keyword">this</span>.age = <span class="number">12</span>; </span><br><span class="line"> <span class="keyword">this</span>.sex = <span class="string">&quot;man&quot;</span>; </span><br><span class="line"> System.out.println(<span class="string">&quot;I am instance init()!&quot;</span>); </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="comment">//静态代码块</span></span><br><span class="line"> <span class="keyword">static</span> &#123; </span><br><span class="line"> count = <span class="number">10</span>;<span class="comment">//只能访问静态数据成员 </span></span><br><span class="line"> System.out.println(<span class="string">&quot;I am static init()!&quot;</span>); </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123; </span><br><span class="line"> System.out.println(<span class="string">&quot;name: &quot;</span>+name+<span class="string">&quot; age: &quot;</span>+age+<span class="string">&quot; sex: &quot;</span>+sex); </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123; </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"> Person p1 = <span class="keyword">new</span> Person(); </span><br><span class="line"> Person p2 = <span class="keyword">new</span> Person();<span class="comment">//静态代码块是否还会被执行？</span></span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I am static init()!</span><br><span class="line">I am instance init()!</span><br><span class="line">I am Person init()!</span><br><span class="line">I am instance init()!</span><br><span class="line">I am Person init()!</span><br></pre></td></tr></table></figure><h1 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h1><p>static修饰属性、方法、类、代码块</p><h2 id="static修饰属性"><a href="#static修饰属性" class="headerlink" title="static修饰属性"></a>static修饰属性</h2><p>static修饰的属性不与对象绑定，所有类共享，只有一份，存在于方法区。</p><p>访问方法：类名<code>.</code>static属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestDemo t1 = <span class="keyword">new</span> TestDemo();</span><br><span class="line">        t1.a++;</span><br><span class="line">        TestDemo.count++;</span><br><span class="line">        System.out.println(t1.a);</span><br><span class="line">        System.out.println(TestDemo.count);</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">        TestDemo t2 = <span class="keyword">new</span> TestDemo();</span><br><span class="line">        t2.a++;</span><br><span class="line">        TestDemo.count++;</span><br><span class="line">        System.out.println(t2.a);</span><br><span class="line">        System.out.println(TestDemo.count);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">============</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="static修饰方法"><a href="#static修饰方法" class="headerlink" title="static修饰方法"></a>static修饰方法</h2><p>static修饰的方法无需创建对象，可以由类直接调用，调用方法：类名<code>.</code>方法。静态方法只能访问静态变量，不能访问非静态变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count = <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//a = 10; error 不可以访问非静态数据成员</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestDemo.change()；<span class="comment">//无需创建实例对象 就可以调用</span></span><br><span class="line">        System.out.println(TestDemo.count);   </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>this</code>和<code>super</code>两个关键字不能在静态上下文中使用(this 是当前实例的引用, super是当前实例父类实例的引用, 也 是和当前实例相关).</p><h1 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h1><p><code>this</code>关键字代表当前对象的引用，不是当前对象。</p><p>一个对象的产生分为两步：</p><p>①为对象分配内存②调用合适的构造方法</p><p>对象的产生需要调用合适的构造方法，在构造方法内部可以使用<code>this</code>，对象还没有产生我们就已经使用了this，恰恰说明this不代表当前对象。</p><p>this的用法：</p><p><code>this()</code>:调用构造方法</p><p><code>this.data</code>:调用当前对象的属性</p><p><code>this.func()</code>:调用当前对象的方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;类的成员：字段、方法、代码块、内部类和接口等&lt;/p&gt;
&lt;h1 id=&quot;字段&quot;&gt;&lt;a href=&quot;#字段&quot; class=&quot;headerlink&quot; title=&quot;字段&quot;&gt;&lt;/a&gt;字段&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaSE" scheme="https://youngsay.cn/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>【JavaSE】数组的定义和使用</title>
    <link href="https://youngsay.cn/2022/01/12/Java-array/"/>
    <id>https://youngsay.cn/2022/01/12/Java-array/</id>
    <published>2022-01-12T14:40:41.000Z</published>
    <updated>2022-01-23T12:10:48.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h1><h2 id="一维数组的定义"><a href="#一维数组的定义" class="headerlink" title="一维数组的定义"></a>一维数组的定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr1=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr2=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><h2 id="一维数组的遍历"><a href="#一维数组的遍历" class="headerlink" title="一维数组的遍历"></a>一维数组的遍历</h2><p>method 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>method 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x:arr) &#123;</span><br><span class="line">    System.out.print(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>method 3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure><h2 id="理解引用"><a href="#理解引用" class="headerlink" title="理解引用"></a>理解引用</h2><p><code>int[] arr=new int[]&#123;1,2,3&#125;</code>创建一个数组，变量<code>arr</code>是一个引用类型，里面只保存了一个整数（数组的起始内存地址），指向<code>&#123;1，2，3&#125;</code>的存储地址。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220117094641.png" alt="image-20220101215440175"></p><h2 id="初识JVM内存区域划分"><a href="#初识JVM内存区域划分" class="headerlink" title="初识JVM内存区域划分"></a>初识JVM内存区域划分</h2><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220117095331.jpeg" alt="img"></p><ul><li>虚拟机栈：重点存储局部变量表，<code>int[] arr</code>这样的引用类型就存储在这里</li><li>堆：JVM管理的最大内存区域，new创建的对象都存储在这里，如<code>new int[]&#123;1，2，3&#125;</code></li><li>方法区：用于存储已被虚拟机加载的类信息、常量、静态变量等数据</li></ul><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220117094651.png" alt="二维数组的内存结构"></p><h2 id="二维数组的定义"><a href="#二维数组的定义" class="headerlink" title="二维数组的定义"></a>二维数组的定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] array=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[][] array1=<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;,&#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[][] array2=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h2 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历"></a>二维数组的遍历</h2><p>method 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">        System.out.print(array[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>method 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span>[] x:array) &#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> y:x) &#123;</span><br><span class="line">        System.out.print(y);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>method 3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.deepToString(array));</span><br></pre></td></tr></table></figure><h1 id="数组练习"><a href="#数组练习" class="headerlink" title="数组练习"></a>数组练习</h1><h2 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h2> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static int[] copyOf(int[] original,int newLength)</span><br></pre></td></tr></table></figure><p><code>original</code> - 要复制的数组<br> <code>newLength</code> - 要返回的副本的长度 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static int[] copyOfRange(int[] original,int from,int to)</span><br></pre></td></tr></table></figure><p><code>original</code> - 要从中复制范围的数组<br><code>from</code> - 要复制的范围的初始索引（包括）<br><code>to</code> - 要复制的范围的最终索引（不包括）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr2=Arrays.copyOf(arr,arr.length);</span><br><span class="line">System.out.println(Arrays.toString(arr2)); <span class="comment">//&#123;1，2，3，4，5&#125;</span></span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">100</span>;</span><br><span class="line">System.out.println(Arrays.toString(arr2)); <span class="comment">//&#123;1，2，3，4，5&#125;</span></span><br><span class="line">System.out.println(Arrays.toString(arr)); <span class="comment">//&#123;100，2，3，4，5&#125;</span></span><br><span class="line"><span class="keyword">int</span>[] arr3=Arrays.copyOfRange(arr,<span class="number">1</span>,<span class="number">3</span>);  <span class="comment">// 拷贝[1,3)范围内的数组</span></span><br><span class="line">System.out.println(Arrays.toString(arr3)); <span class="comment">//&#123;2，3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="数组排序（冒泡排序）"><a href="#数组排序（冒泡排序）" class="headerlink" title="数组排序（冒泡排序）"></a>数组排序（冒泡排序）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr=&#123;<span class="number">11</span>,<span class="number">2</span>,<span class="number">31</span>,<span class="number">14</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    bubbleSort(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> flg=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp=arr[j];</span><br><span class="line">                arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>]=tmp;</span><br><span class="line">                flg=<span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flg==<span class="keyword">false</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组排序（偶数在前，奇数在后）"><a href="#数组排序（偶数在前，奇数在后）" class="headerlink" title="数组排序（偶数在前，奇数在后）"></a>数组排序（偶数在前，奇数在后）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    int[] arr=&#123;1,2,3,4,5&#125;;</span><br><span class="line">    transform(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line">public static void transform(int[] arr)&#123;</span><br><span class="line">    int left=0;</span><br><span class="line">    int right=arr.length-1;</span><br><span class="line">    while(left&lt;right)&#123;</span><br><span class="line">        while(left&lt;right&amp;&amp;arr[left]%2==0)&#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        //遇到奇数了</span><br><span class="line">        while(left&lt;right&amp;&amp;arr[right]%2!=0)&#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        //遇到偶数了</span><br><span class="line">        if(left&lt;right)&#123;</span><br><span class="line">            int tmp=arr[left];</span><br><span class="line">            arr[left]=arr[right];</span><br><span class="line">            arr[right]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一维数组&quot;&gt;&lt;a href=&quot;#一维数组&quot; class=&quot;headerlink&quot; title=&quot;一维数组&quot;&gt;&lt;/a&gt;一维数组&lt;/h1&gt;&lt;h2 id=&quot;一维数组的定义&quot;&gt;&lt;a href=&quot;#一维数组的定义&quot; class=&quot;headerlink&quot; title=&quot;一维数</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaSE" scheme="https://youngsay.cn/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>【C语言】基础语法的简单概括</title>
    <link href="https://youngsay.cn/2022/01/08/C-prime-knowledge/"/>
    <id>https://youngsay.cn/2022/01/08/C-prime-knowledge/</id>
    <published>2022-01-08T01:33:41.000Z</published>
    <updated>2022-01-23T12:10:05.005Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>为了更加丰富地表达生活中的各种值，C语言中有不同的数据类型。每个数据类型有其占用空间的大小。我们用<code>sizeof</code>可以获取某个数据类型所占用空间的字节数。</p><p>下面这段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">short</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br></pre></td></tr></table></figure><p>在vs2019运行时，输出结果是：1244848</p><p>在linux平台运行时，结果是：1248848</p><p>对比发现，long在不同的编译器结果不同。<strong>c语言并没有规定long的大小，只是规定了sizeof(long)&gt;=sizeof(int)。</strong></p><h3 id="变量的作用域和生命周期"><a href="#变量的作用域和生命周期" class="headerlink" title="变量的作用域和生命周期"></a>变量的作用域和生命周期</h3><ul><li>作用域：变量作用的范围。变量在哪里可以使用，哪里就是它的作用域。</li></ul><p>局部变量的作用域是变量所在的局部范围；全局变量的作用域是整个工程。</p><ul><li>生命周期：变量由创建到销毁这一时间段</li></ul><p>局部变量的生命周期是：局部变量的作用域；全局变量的生命周期是：整个程序。</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><h4 id="字面常量"><a href="#字面常量" class="headerlink" title="字面常量"></a>字面常量</h4><h4 id="const修饰的常变量"><a href="#const修饰的常变量" class="headerlink" title="const修饰的常变量"></a>const修饰的常变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line">pi = <span class="number">6.66</span>;</span><br><span class="line"><span class="comment">//报错信息：表达式必须是可修改的左值</span></span><br></pre></td></tr></table></figure><p>由const修饰的变量只是不可以再次修改，但本质仍是变量。</p><h4 id="define定义的标识符常量"><a href="#define定义的标识符常量" class="headerlink" title="define定义的标识符常量"></a>define定义的标识符常量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>, MAX);</span><br></pre></td></tr></table></figure><h4 id="枚举常量"><a href="#枚举常量" class="headerlink" title="枚举常量"></a>枚举常量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">MyEnum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">MALE,</span><br><span class="line">FAMALE,</span><br><span class="line">SECRET</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, MALE); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, FAMALE); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, SECRET); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> arr1[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> arr2[] = &#123; <span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220117091149.png" alt="image-20211227094115348"></p><p>字符串的结束标志是一个<code>\0</code>的转义字符。在计算字符串长度的时候<code>\0</code>不算作字符串内容。printf输出内容是<code>\0</code>之前的内容，arr2找不到<code>\0</code>出现了乱码，用<code>strlen</code>计算长度时也会出现随机值。</p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>下段代码的输出结果是什么？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;c:\test\628\test.c&quot;</span>));</span><br></pre></td></tr></table></figure><p>输出结果是14。</p><p><code>\t</code>—–&gt;水平制表符</p><p><code>\62</code>—&gt;将<strong>8进制数</strong>数字62转换成10进制数字50</p><p>注：</p><p><code>\ddd</code>中ddd表示1-3位八进制数字，范围是0-7，所以上题中是\62，不是\628</p><p><code>\xdd</code>中dd表示2个十六进制数字。 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="string">&#x27;\x31&#x27;</span>); <span class="comment">//1</span></span><br><span class="line"><span class="comment">//将16进制数字31转换为10进制数字49，ascii码值代表的字符为 ‘1’</span></span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span>  <span class="keyword">break</span>  <span class="keyword">case</span>  <span class="keyword">char</span>  <span class="keyword">const</span>  <span class="keyword">continue</span>  <span class="keyword">default</span>  <span class="keyword">do</span>  <span class="keyword">double</span> <span class="keyword">else</span>  <span class="keyword">enum</span> </span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">float</span>  <span class="keyword">for</span>  <span class="keyword">goto</span>  <span class="keyword">if</span>  <span class="keyword">int</span>  <span class="keyword">long</span>  <span class="keyword">register</span>   <span class="keyword">return</span>  <span class="keyword">short</span>  <span class="keyword">signed</span></span><br><span class="line"><span class="keyword">sizeof</span>  <span class="keyword">static</span> struct  <span class="keyword">switch</span>  <span class="keyword">typedef</span> <span class="keyword">union</span>  <span class="keyword">unsigned</span>  <span class="keyword">void</span>  <span class="keyword">volatile</span>  <span class="keyword">while</span></span><br></pre></td></tr></table></figure><h4 id="define"><a href="#define" class="headerlink" title="define"></a>define</h4><h5 id="定义标识符常量"><a href="#定义标识符常量" class="headerlink" title="定义标识符常量"></a>定义标识符常量</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[N] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="定义宏"><a href="#定义宏" class="headerlink" title="定义宏"></a>定义宏</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a,b)(a)&gt;(b)?(a):(b)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, MAX(x,y)); <span class="comment">//20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><blockquote><p>static是用来修饰变量和函数的</p><ol><li>修饰局部变量-称为静态局部变量</li><li>修饰全局变量-称为静态全局变量</li><li>修饰函数-称为静态函数</li></ol></blockquote><h5 id="修饰局部变量"><a href="#修饰局部变量" class="headerlink" title="修饰局部变量"></a>修饰局部变量</h5><p>观察下面两段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">b++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b); <span class="comment">//12345</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">add();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">b++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b); <span class="comment">//11111</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">add();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比发现，static修饰局部变量改变了变量的生命周期，让静态局部变量出了作用域依然存在，到程序结束，生命周期才结束。</p><p>static修饰局部变量时，改变了局部变量的存储位置，将局部变量由堆区存储到静态区。</p><h5 id="修饰全局变量和函数"><a href="#修饰全局变量和函数" class="headerlink" title="修饰全局变量和函数"></a>修饰全局变量和函数</h5><p>一个全局变量（函数）被static修饰，使得这个全局变量（函数）只能在本源文件内使用，不能在其他源文件内使<br>用。</p><p>全局变量（函数）具有外部链接属性，可以用extern外部引用，但被static修饰后，外部链接变成了内部链接，只能在当前源文件内部使用。</p><h4 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h4><p>类型重命名：使类型名简单化，书写更方便</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将类型unsigned int重命名为uint_32，下次可以直接使用类型uint_32</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> uint_32;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">uint_32 b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义结构体类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">char</span> sex[<span class="number">6</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//d</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stu</span><span class="params">(struct MyStruct* ps)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%d,%s&quot;</span>, ps-&gt;name, ps-&gt;age, ps-&gt;sex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//结构体实例化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span> <span class="title">stu1</span> =</span> &#123;<span class="string">&quot;菜鸟小胖p&quot;</span>,<span class="number">20</span>,<span class="string">&quot;保密&quot;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span> <span class="title">stu2</span> =</span> &#123; <span class="string">&quot;小明&quot;</span>,<span class="number">101</span>,<span class="string">&quot;男&quot;</span> &#125;;</span><br><span class="line"><span class="comment">//打印结构体</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%d,%s\n&quot;</span>, stu1.name, stu1.age, stu1.sex);</span><br><span class="line"><span class="comment">//函数打印结构体</span></span><br><span class="line">stu(&amp;stu2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;p&gt;为了更加丰富地表达生活中的各种值，C语言中有不同的数据类型。每个数据类型有其占用空间的大小。我们用&lt;code&gt;sizeof&lt;</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="c" scheme="https://youngsay.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>2021年度总结</title>
    <link href="https://youngsay.cn/2022/01/01/2021/"/>
    <id>https://youngsay.cn/2022/01/01/2021/</id>
    <published>2022-01-01T09:24:01.000Z</published>
    <updated>2022-01-23T12:07:34.465Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2022年来了，我又长大了一岁。</p><p>过去这一年，有快乐有失落，有收获有遗憾。</p><p>伤感的话不再说，遗憾的事不再提，新的一年继续好好生活。</p></blockquote><p>等等，在好好生活之前还是写一下年终总结吧，虽然今天已经是2022年……</p><p>回顾过去的这一年，<strong>每一天都很平常，有时很快乐，有时会难过，也许有成长，难免有遗憾。</strong>就在这平凡的一天又一天中，平凡的我又长大了一岁。</p><p>我没有写日记的习惯，很多事过去了就过去了，也许以后就再也不会想起。比如现在我想写一个年度总结，我不知道写些什么。好在有这样一个博客，或多或少能留存一些当时的记忆。</p><ul><li>2021年3月29日，新博客建成，发布第一篇博客：  <a href="https://www.youngsay.cn/2021/03/29/go-school/">新学期，新博客，新开始!</a></li></ul><p>在此之前也搭建过其他博客，总是写着写着感觉没啥意思，最终都删库跑路了。这是我持续时间最长的博客，我会一直让它活下去（希望别被打脸）。</p><p>回看第一篇博客，感慨万千。当时写到“我想学计算机相关专业，但无奈被调剂到了应用物理”，现在我已经是计算机科学与技术专业的学生了，2021/9/17 收到了转专业成功的消息，这个可以算是今年很开心的一件事。当时我提到“一直对编程感兴趣，尤其是前端”，现在我已经俩月没学前端了，2021/11/6 发的vue那篇笔记应该是我最后一次学习前端，也是刚开始接触vue。现在专业课开了Python和C语言，所以就把js先搁置了。最初学的时候就不扎实，现在再回看当时的笔记已经很陌生了。</p><ul><li>2021年6月2号，在听讲座后不久，发布了：  <a href="https://blog.wangyouwu.cn/2021/06/02/new/">讲座，机会，关系!</a></li></ul><p>这是听完学长讲座后不久写的一篇博客。学长是我原来学院信科专业的学生，考上了北理工研究生，讲座期间在字节跳动实习，现在怎样我也不知道了。当时我还加了他的微信，至今也没发过消息……学长的讲座对我影响很大，在听完他讲座后的一段时间学习很积极，但劲头持续时间不长（捂脸）。</p><ul><li>2021年7月21日，放暑假两周后发布： <a href="https://blog.wangyouwu.cn/2021/07/21/summer">暑假，目的论，自卑情结</a></li></ul><p>这篇博客是看了《被人讨厌的勇气》的读后感，对我有些许启发。我惰性很强，自制力很差，如果我再胸无大志的话，便是个完完全全快乐的人。但我又有燕雀之志（虽无鸿鹄之志，但也有些小追求），所以有时会很焦虑，只能做半个快乐的人。我因为自制力差，经常沉迷于网络而浪费很多时间，但我又有些追求，时而积极，时而消极。积极时我经常为过去的消极而懊悔，为失去了的宝贵时间而焦虑，但积极一阵后便又迎来了消极，周而复始，反反复复。</p><ul><li>2021年9月6日：大二上开学，2021年12月24日，本学期结束。</li></ul><p>这学期自我感觉良好，比以往更加充实快乐。</p><p>回顾这一年，当时的很多想法已经变了，当时的很多困惑现在已不再困惑，当时认为天大的事现在看来也许都不叫事。最后引用余华的一句话来结束本篇博客，“<strong>没有什么比时间更具有说服力了，因为时间无需通知我们就可以改变一切</strong>”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2022年来了，我又长大了一岁。&lt;/p&gt;
&lt;p&gt;过去这一年，有快乐有失落，有收获有遗憾。&lt;/p&gt;
&lt;p&gt;伤感的话不再说，遗憾的事不再提，新的一年继续好好生活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;等等，在好好生活之前还是写一下年终总结吧，虽然</summary>
      
    
    
    
    <category term="日常" scheme="https://youngsay.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>【JavaSE】方法及递归的使用</title>
    <link href="https://youngsay.cn/2021/11/23/Java-method/"/>
    <id>https://youngsay.cn/2021/11/23/Java-method/</id>
    <published>2021-11-23T05:05:41.000Z</published>
    <updated>2022-01-23T12:10:41.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识方法"><a href="#初识方法" class="headerlink" title="初识方法"></a>初识方法</h1><p>Java中的方法类似于c语言中的函数</p><p>观察下面代码，体会方法的好处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求两个数的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxTwoNum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求三个数的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxThreeNum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max=maxTwoNum(a,b);</span><br><span class="line">    <span class="keyword">return</span> maxTwoNum(max,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">23</span>,c=<span class="number">4</span>;</span><br><span class="line">    System.out.println(maxThreeNum(a,b,c));</span><br></pre></td></tr></table></figure><p>灵活使用方法，可以减少重复代码，使代码更简单。</p><h1 id="实参、形参的关系"><a href="#实参、形参的关系" class="headerlink" title="实参、形参的关系"></a>实参、形参的关系</h1><p><strong>Java当中只有按值传递</strong></p><p>分析如下代码：交换两个整型变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main5</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//交换两个整型变量的错误演示</span></span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">20</span>;</span><br><span class="line">    swap(a,b);</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为10 20，没有完成两数的交换。对于基础类型来说, 形参相当于实参的拷贝. 即 <strong>传值调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=arr[<span class="number">0</span>];</span><br><span class="line">    arr[<span class="number">0</span>]=arr[<span class="number">1</span>];</span><br><span class="line">    arr[<span class="number">1</span>]=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//交换两个整数的正确方法</span></span><br><span class="line">    <span class="keyword">int</span>[] arr=&#123;<span class="number">10</span>,<span class="number">20</span>&#125;;</span><br><span class="line">    swap1(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方案：传<strong>引用类型</strong>参数，如数组。</p><p>练习：求n个阶乘之和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">        sum += factor(j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factor</span><span class="params">(<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> rst=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=j;i++)&#123;</span><br><span class="line">        rst *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> num=scan.nextInt();</span><br><span class="line">    System.out.println(add(num));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法的重载（overload）："><a href="#方法的重载（overload）：" class="headerlink" title="方法的重载（overload）："></a>方法的重载（overload）：</h1><p>同一个方法名字, 提供不同版本的实现, 称为<strong>方法重载</strong></p><ul><li>方法名相同</li><li>返回值不做要求</li><li>参数列表不同（参数个数或参数类型不同）</li><li>同一个类当中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(sum(<span class="number">4</span>,<span class="number">6</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面试题：重载和重写的区别</p><h1 id="方法的递归"><a href="#方法的递归" class="headerlink" title="方法的递归"></a>方法的递归</h1><p>一个方法在执行过程中调用自身, 就称为 “递归”。</p><p>递归把大问题化解成小问题，求解递归问题，要找到终止条件和递归公式。</p><h2 id="求n的阶乘"><a href="#求n的阶乘" class="headerlink" title="求n的阶乘"></a>求n的阶乘</h2><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113145034.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factor</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n * factor(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(factor(<span class="number">4</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求n个阶乘之和"><a href="#求n个阶乘之和" class="headerlink" title="求n个阶乘之和"></a>求n个阶乘之和</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factor</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i*factor(i-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> num=scan.nextInt();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num; i++) &#123;</span><br><span class="line">        sum+= factor(i);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="按顺序打印一个数字的每一位-例如-1234-打印出-1-2-3-4"><a href="#按顺序打印一个数字的每一位-例如-1234-打印出-1-2-3-4" class="headerlink" title="按顺序打印一个数字的每一位(例如 1234 打印出 1 2 3 4)"></a>按顺序打印一个数字的每一位(例如 1234 打印出 1 2 3 4)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">9</span>)&#123;</span><br><span class="line">        func(n/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(n%<span class="number">10</span>+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    func(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归求-1-2-3-…-10"><a href="#递归求-1-2-3-…-10" class="headerlink" title="递归求 1 + 2 + 3 + … + 10"></a>递归求 1 + 2 + 3 + … + 10</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n+sum(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(sum(<span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写一个递归方法，输入一个非负整数，返回组成它的数字之和"><a href="#写一个递归方法，输入一个非负整数，返回组成它的数字之和" class="headerlink" title="写一个递归方法，输入一个非负整数，返回组成它的数字之和."></a>写一个递归方法，输入一个非负整数，返回组成它的数字之和.</h2><p>例如，输入 1729, 则应该返回1+7+2+9， 它的和是19</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">9</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> n%<span class="number">10</span>+func(n/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(func(<span class="number">5211</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求斐波那契数列的第N项："><a href="#求斐波那契数列的第N项：" class="headerlink" title="求斐波那契数列的第N项："></a>求斐波那契数列的第N项：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不建议用递归实现斐波那契数列，建议用循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n2=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n3=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        n3=n1+n2;</span><br><span class="line">        n1=n2;</span><br><span class="line">        n2=n3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(func(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考递归：横向思考，不要展开递归的代码</p><p>代码执行：纵向执行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识方法&quot;&gt;&lt;a href=&quot;#初识方法&quot; class=&quot;headerlink&quot; title=&quot;初识方法&quot;&gt;&lt;/a&gt;初识方法&lt;/h1&gt;&lt;p&gt;Java中的方法类似于c语言中的函数&lt;/p&gt;
&lt;p&gt;观察下面代码，体会方法的好处。&lt;/p&gt;
&lt;figure class=&quot;h</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaSE" scheme="https://youngsay.cn/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>【JavaSE】程序逻辑控制练习</title>
    <link href="https://youngsay.cn/2021/11/20/Java-logic-control/"/>
    <id>https://youngsay.cn/2021/11/20/Java-logic-control/</id>
    <published>2021-11-20T08:55:41.000Z</published>
    <updated>2022-01-23T12:10:37.970Z</updated>
    
    <content type="html"><![CDATA[<h4 id="输入1-7，输出工作日或休息日"><a href="#输入1-7，输出工作日或休息日" class="headerlink" title="输入1-7，输出工作日或休息日"></a>输入1-7，输出工作日或休息日</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">switch</span>(scan.nextInt()) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;工作日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;休息日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>switch 中的值只能是 整数|枚举|字符|字符串，long、double、float、boolean不能作为switch参数的类型。</p></blockquote><h4 id="判断一个数是否为素数（3种方法）"><a href="#判断一个数是否为素数（3种方法）" class="headerlink" title="判断一个数是否为素数（3种方法）"></a>判断一个数是否为素数（3种方法）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> num=scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;num;i++) &#123;</span><br><span class="line">    <span class="comment">//方法2：i&lt;=num/2</span></span><br><span class="line">    <span class="comment">//方法3：i&lt;=Math.sqrt(num);</span></span><br><span class="line">    <span class="keyword">if</span>(num%i==<span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(num+<span class="string">&quot;不是素数&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=num)&#123;</span><br><span class="line">    System.out.println(num+<span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印100以内的所有素数"><a href="#打印100以内的所有素数" class="headerlink" title="打印100以内的所有素数"></a>打印100以内的所有素数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;=<span class="number">100</span>;j++) &#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;j;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j%i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">        System.out.println(j+<span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出1000-2000之间的所有闰年"><a href="#输出1000-2000之间的所有闰年" class="headerlink" title="输出1000-2000之间的所有闰年"></a>输出1000-2000之间的所有闰年</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> year=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">for</span>(year=<span class="number">1000</span>;year&lt;=<span class="number">2000</span>;year++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>||year%<span class="number">400</span>==<span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(year+<span class="string">&quot;是闰年&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="输出乘法口诀表"><a href="#输出乘法口诀表" class="headerlink" title="输出乘法口诀表"></a>输出乘法口诀表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++) &#123; <span class="comment">//i--行数</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)&#123; <span class="comment">//j--列数  列数的多少取决于第一行 第一行有一列，第二行有两列，……</span></span><br><span class="line">        System.out.print(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+i*j+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求两个数的最大公约数"><a href="#求两个数的最大公约数" class="headerlink" title="求两个数的最大公约数"></a>求两个数的最大公约数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> a=scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> b=scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> c=b;</span><br><span class="line"><span class="keyword">while</span>(a%b!=<span class="number">0</span>) &#123;</span><br><span class="line">    c=a%b;</span><br><span class="line">    a=b;</span><br><span class="line">    b=c;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(a+<span class="string">&quot;和&quot;</span>+b+<span class="string">&quot;的最大公约数是&quot;</span>+c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="计算1-1-1-2-1-3……-1-99-1-100的值"><a href="#计算1-1-1-2-1-3……-1-99-1-100的值" class="headerlink" title="计算1/1-1/2+1/3……+1/99-1/100的值"></a>计算1/1-1/2+1/3……+1/99-1/100的值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">100</span>;j++) &#123;</span><br><span class="line">    sum += <span class="number">1.0</span>/j*flag;</span><br><span class="line">    flag=-flag;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure><h4 id="编写程序数一下1到100的所有整数中出现多少个数字9"><a href="#编写程序数一下1到100的所有整数中出现多少个数字9" class="headerlink" title="编写程序数一下1到100的所有整数中出现多少个数字9"></a>编写程序数一下1到100的所有整数中出现多少个数字9</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">10</span>==<span class="number">9</span>||i/<span class="number">10</span>==<span class="number">9</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><h4 id="求出0-999之间的所有”水仙花”"><a href="#求出0-999之间的所有”水仙花”" class="headerlink" title="求出0~999之间的所有”水仙花”"></a>求出0~999之间的所有”水仙花”</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">100</span>;i&lt;<span class="number">1000</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(Math.pow(i%<span class="number">10</span>,<span class="number">3</span>)+Math.pow(i/<span class="number">10</span>%<span class="number">10</span>,<span class="number">3</span>)+Math.pow(i/<span class="number">100</span>%<span class="number">10</span>,<span class="number">3</span>)==i) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>改进：求出1-6位数的自幂数</p><blockquote><p>附：其他位数的自幂数名字</p><p>一位自幂数：独身数；三位自幂数：水仙花数；四位自幂数：四叶玫瑰数；五位自幂数：五角星数；六位自幂数：六合数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9999999</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp=i;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//p</span></span><br><span class="line">    <span class="keyword">while</span> (temp!=<span class="number">0</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        temp=temp/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp=i;</span><br><span class="line">    <span class="keyword">while</span>(temp!=<span class="number">0</span>)&#123;</span><br><span class="line">        sum += Math.pow(temp%<span class="number">10</span>,count);</span><br><span class="line">        temp=temp/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum==i)&#123;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写代码模拟三次密码输入场景，最多输入3次"><a href="#编写代码模拟三次密码输入场景，最多输入3次" class="headerlink" title="编写代码模拟三次密码输入场景，最多输入3次"></a>编写代码模拟三次密码输入场景，最多输入3次</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String input = scan.next();</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(count=<span class="number">2</span>;count&gt;<span class="number">0</span>;count--) &#123;</span><br><span class="line">    <span class="keyword">if</span>(input.equals(<span class="string">&quot;zzz123&quot;</span>))&#123; <span class="comment">//🔺不能用=</span></span><br><span class="line">        System.out.println(<span class="string">&quot;密码正确，登陆成功&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入错误，你还有&quot;</span>+count+<span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    input = scan.next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(count&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;三次均输错，退出程序&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输入一个数，输出该数二进制中1的个数："><a href="#输入一个数，输出该数二进制中1的个数：" class="headerlink" title="输入一个数，输出该数二进制中1的个数："></a>输入一个数，输出该数二进制中1的个数：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> num=scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(((num&gt;&gt;i)&amp;<span class="number">1</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(num+<span class="string">&quot;二进制中1的个数为：&quot;</span>+count);</span><br></pre></td></tr></table></figure><p>改进：</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113095208.png" alt="image-20211123124426921"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">    n=n&amp;(n-<span class="number">1</span>);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;输入1-7，输出工作日或休息日&quot;&gt;&lt;a href=&quot;#输入1-7，输出工作日或休息日&quot; class=&quot;headerlink&quot; title=&quot;输入1-7，输出工作日或休息日&quot;&gt;&lt;/a&gt;输入1-7，输出工作日或休息日&lt;/h4&gt;&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaSE" scheme="https://youngsay.cn/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>【JavaSE】数据结构与运算符</title>
    <link href="https://youngsay.cn/2021/11/20/Java-data-type/"/>
    <id>https://youngsay.cn/2021/11/20/Java-data-type/</id>
    <published>2021-11-20T03:27:41.000Z</published>
    <updated>2022-01-23T12:10:34.284Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初识Java"><a href="#初识Java" class="headerlink" title="初识Java"></a>初识Java</h3><h4 id="第一个java程序"><a href="#第一个java程序" class="headerlink" title="第一个java程序"></a>第一个java程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>一个java文件中，只能有一个public类，且类名要与文件相同。</p></li><li><p>类存在于源文件里面；方法存在于类中；语句存在于方法中。</p></li><li><p>类名要采用大驼峰形式（首字母均大写）命名。</p></li></ul><p>面试问题：</p><p>main方法为什么是static：</p><p>String[] args的作用是什么：运行时命令行参数</p><h4 id="如何运行java程序"><a href="#如何运行java程序" class="headerlink" title="如何运行java程序"></a>如何运行java程序</h4><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083809.png" alt="image-20211120114709234"></p><p>大致过程就是，我们写好的.java文件（源文件）被编译器编译后变成.class文件（<strong>字节码</strong>），然后被JVM的类加载器加载到内存，通过字节码校验器去做一些校验，校验通过后交由<strong>解释器</strong>将字节码文件解释成计算机能够识别的机器指令。</p><p>面试问题：双亲委派模型、类加载器</p><p>JDK Java开发环境 ；JRE Java运行环境 ；JVM Java虚拟机</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083822.png" alt="image-20211120114912827"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zzz</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;zzz&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083828.png" alt="image-20211120115549069"></p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113084529.png" alt="image-20211120115606886"></p><p>Java中，一个类就会生成一个字节码文件。</p><p>为何这样设置？为了方便使用，如果需要HelloWorld这个类，就加载对应的字节码文件。</p><h3 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h3><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083844.jpeg" alt="在这里插入图片描述"></p><p>变量均存储在内存中。</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">10</span>; <span class="comment">//定义一个整形变量</span></span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><p>一个int变量占4个字节。</p><blockquote><p>什么是字节? </p><p>字节是计算机中表示空间大小的基本单位. 计算机使用二进制表示数据. 我们认为 8 个二进制位(bit) 为一个字节(Byte). 我们平时的计算机为 8GB 内存, 意思是 8G 个字节. 其中 1KB = 1024 Byte, 1MB = 1024 KB, 1GB = 1024 MB. 所以 8GB 相当于 80 多亿个字节</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.MAX_VALUE); <span class="comment">// 2147483647</span></span><br><span class="line">System.out.println(Integer.MIN_VALUE); <span class="comment">// -2147483648</span></span><br></pre></td></tr></table></figure><p>4 个字节表示的数据范围是 -2^31 -&gt; 2^31-1 , 也就大概是 -21亿 到 +21亿</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> maxValue = Integer.MAX_VALUE;</span><br><span class="line">System.out.println(maxValue+<span class="number">1</span>); <span class="comment">// -2147483648</span></span><br><span class="line"><span class="keyword">int</span> minValue = Integer.MIN_VALUE;</span><br><span class="line">System.out.println(minValue-<span class="number">1</span>); <span class="comment">// 2147483647</span></span><br></pre></td></tr></table></figure><p>如果运算的结果超出了 int 的最大范围, 就会出现溢出的情况。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083849.png" alt="image-20211120121410693"></p><p>图：int的取值范围</p><h5 id="长整型"><a href="#长整型" class="headerlink" title="长整型"></a>长整型</h5><p>long占8个字节，取值范围是-2^63—2^63-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> num=<span class="number">10L</span>;</span><br><span class="line">System.out.println(num);</span><br><span class="line">System.out.println(Long.MAX_VALUE);</span><br><span class="line">System.out.println(Long.MIN_VALUE);</span><br></pre></td></tr></table></figure><p>初始化长整型变量是记得在数字后面加上L</p><h5 id="双精度浮点型"><a href="#双精度浮点型" class="headerlink" title="双精度浮点型"></a>双精度浮点型</h5><p>double占8个字节，浮点数在内存中的存储与整形不同，不能单纯用2^n表示其取值范围，且浮点数的存储会存在精度误差。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> num = <span class="number">1.1</span>;</span><br><span class="line">System.out.println(num * num) <span class="comment">// 1.2100000000000002</span></span><br></pre></td></tr></table></figure><h5 id="单精度浮点型"><a href="#单精度浮点型" class="headerlink" title="单精度浮点型"></a>单精度浮点型</h5><p>float占4个字节，初始化时要在数字后面加上f</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> num = <span class="number">1.0f</span>;    <span class="comment">// 写作 1.0F 也可以</span></span><br><span class="line">System.out.println(num);</span><br></pre></td></tr></table></figure><h5 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h5><p>char在java中占2个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch=<span class="string">&#x27;A&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>Java 中使用<code>单引号 + 单个字母 </code>的形式表示字符字面值. </li><li>计算机中的字符本质上是一个整数. 在 C 语言中使用 ASCII 表示字符, 而 Java 中使用 Unicode 表示字符. 因此一个字符占用两个字节, 表示的字符种类更多, 包括中文.</li><li>使用一个汉字表示一个字符时，报错是要用<code>javac -encoding UTF-8 文件名.java</code><h5 id="字节型"><a href="#字节型" class="headerlink" title="字节型"></a>字节型</h5></li></ul><p>byte占1个字节，范围大小是-128–&gt;127</p><p>byte类型相加减时会进行整形提升，要用int保存。</p><h5 id="短整型"><a href="#短整型" class="headerlink" title="短整型"></a>短整型</h5><p>short占2个字节，范围大小是-2^15-2^15-1，范围较小，一般不使用。</p><h5 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h5><p>boolean只有两种取值，true或false。Java中的布尔型和整形不能相互转换，不能用1或0表示布尔型。</p><h5 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h5><p>String占8个字节，Java 使用 <code>双引号 + 若干字符</code> 的方式表示字符串字面值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;胖虎同学&quot;</span>;</span><br></pre></td></tr></table></figure><p>使用<code>+</code>可以进行字符串的拼接，任何类型的变量与字符串进行拼接时，都会转换成字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">21</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+a+b); <span class="comment">//2021</span></span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083857.png" alt="image-20211120154001169"></p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">a = <span class="number">20</span>; <span class="comment">// 编译出错. 提示 无法为最终变量a分配值</span></span><br></pre></td></tr></table></figure><p>常量不能在程序运行过程中发生修改。</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ul><li>不同数字类型的变量之间赋值, 表示范围更小的类型能隐式转换成范围较大的类型</li><li>如果需要把范围大的类型赋值给范围小的, 需要强制类型转换, 但是可能精度丢失。不相关的类型不能进行类型转换。</li><li>将一个字面值常量进行赋值的时候, Java 会自动针对数字范围进行检查.</li></ul><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083903.png" alt="image-20211120154336948"></p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p><code>+-*/%</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span>/<span class="number">2</span>); <span class="comment">// 2</span></span><br><span class="line">System.out.println(<span class="number">5.0</span>/<span class="number">2</span>); <span class="comment">//2.5</span></span><br><span class="line">System.out.println((<span class="keyword">double</span>)<span class="number">5</span>/<span class="number">2</span>); <span class="comment">//2.5</span></span><br><span class="line">System.out.println((<span class="keyword">double</span>)(<span class="number">5</span>/<span class="number">2</span>)); <span class="comment">// 2.0</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span>%<span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line">System.out.println(-<span class="number">5</span>%<span class="number">2</span>); <span class="comment">//-1</span></span><br><span class="line">System.out.println(<span class="number">5</span>%-<span class="number">2</span>); <span class="comment">//1</span></span><br><span class="line">System.out.println(-<span class="number">5</span>%-<span class="number">2</span>); <span class="comment">//-1</span></span><br></pre></td></tr></table></figure><p>Java中，不仅仅可以对 int 求模, 也能对 double 来求模。</p><p>值得注意的是，下图中i=10，而c语言是11。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083909.png" alt="image-20211120172159321"></p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p><code>== != &lt; &gt; &lt;= &gt;=</code></p><p>关系运算符表达式返回值都是布尔值。</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p><code>&amp;&amp; || !</code></p><p>Java中，逻辑非！只能作用于布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">20</span>;</span><br><span class="line">System.out.println(!a &lt; b);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20220113083917.png" alt="image-20211120165938626"></p><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p><code>&amp; | ~ ^</code></p><h4 id="移位运算符"><a href="#移位运算符" class="headerlink" title="移位运算符"></a>移位运算符</h4><p><code> &gt;&gt; &lt;&lt; &gt;&gt;&gt;</code></p><p>无符号右移 &gt;&gt;&gt;：最右侧位不要了, 最左侧补 0.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0xffffffff</span>;</span><br><span class="line">System.out.printf(<span class="string">&quot;%x\n&quot;</span>, a &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 运行结果(注意, 是按十六进制打印的) 7fffffff </span></span><br></pre></td></tr></table></figure><blockquote><ul><li>左移 1 位, 相当于原数字 * 2. 左移 N 位, 相当于原数字 * 2 的N次方</li><li>右移 1 位, 相当于原数字 / 2. 右移 N 位, 相当于原数字 / 2 的N次方</li><li>由于计算机计算移位效率高于计算乘除, 当某个代码正好乘除 2 的N次方的时候可以用移位运算代替</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;初识Java&quot;&gt;&lt;a href=&quot;#初识Java&quot; class=&quot;headerlink&quot; title=&quot;初识Java&quot;&gt;&lt;/a&gt;初识Java&lt;/h3&gt;&lt;h4 id=&quot;第一个java程序&quot;&gt;&lt;a href=&quot;#第一个java程序&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaSE" scheme="https://youngsay.cn/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>c语言：操作符误区总结</title>
    <link href="https://youngsay.cn/2021/11/13/c-pointer/"/>
    <id>https://youngsay.cn/2021/11/13/c-pointer/</id>
    <published>2021-11-13T03:31:01.000Z</published>
    <updated>2022-01-23T12:10:01.489Z</updated>
    
    <content type="html"><![CDATA[<p>4个二进制位可以表示一个16进制数字</p><p>1111 –&gt;f </p><hr><p>指针类型的意义：</p><blockquote><ol><li>指针类型决定了：指针解引用的权限有多大（整型指针解引用访问4个字节，字符型指针解引用只能访问1个字节）</li><li>指针类型决定了，指针走一步，能走多远（步长）</li></ol></blockquote><p>例题1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">int</span> a = <span class="number">0x11223344</span>;</span><br><span class="line"><span class="keyword">char</span>* pc = &amp;a;</span><br><span class="line">*pc = <span class="number">0</span>; <span class="comment">//只改变一个字节</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* pa = &amp;a;</span><br><span class="line">*pa = <span class="number">0</span>;<span class="comment">//改变了四个字节</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20211025194727.png" alt="image-20211025194637350"> </p><p>char* 的指针解引用就只能访问一个字节，而 int* 的指针的解引用能访问四个字节。</p><p>例题2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>* p = arr;</span><br><span class="line"><span class="keyword">char</span>* pc = arr;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p + <span class="number">1</span>);<span class="comment">//加了4，因为int4字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pc + <span class="number">1</span>);<span class="comment">//加了1，因为char1字节</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20211025193223.png" alt="image-20211025193211532"></p><hr><p>野指针：指针指向的位置是不可知的</p><p>为什么出现野指针：</p><p>指针使用时未初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* p;<span class="comment">//未初始化，地址是随机的</span></span><br><span class="line">*p = <span class="number">10</span>;<span class="comment">//非法访问内存</span></span><br></pre></td></tr></table></figure><p>指针越界：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//越界访问</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>* p = arr;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">*p = i;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>指针指向的空间释放：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>*p = test();</span><br><span class="line">*p = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>退出test函数后空间释放，找不到指针p的地址。</p><blockquote><p>总结：如何规避野指针？</p><p>1.指针初始化</p><p>2.小心指针越界</p><p>3.指针指向空间释放即设置NULL</p><p>4.指针使用之前检查有效性</p></blockquote><hr><p>指针的运算：</p><p>指针±整数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>* p = arr; <span class="comment">//元素1的地址</span></span><br><span class="line"><span class="keyword">int</span>* pend = arr + <span class="number">9</span>; <span class="comment">//元素10的地址</span></span><br><span class="line"><span class="keyword">while</span> (p &lt; pend)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p);</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针-指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, &amp;arr[<span class="number">9</span>] - &amp;c[<span class="number">0</span>]);<span class="comment">//err，两个指针指向不同空间</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, &amp;arr[<span class="number">9</span>] - &amp;arr[<span class="number">0</span>]);<span class="comment">//这个输出9</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两指针相减的前提是指针指向同一块空间，<strong>指针-指针得到的是两个指针之间元素的个数</strong></p><p>例题：求字符串长度：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.strlen()函数</span></span><br><span class="line"><span class="comment">//2.递归</span></span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strlen</span><span class="params">(<span class="keyword">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* start = str;</span><br><span class="line"><span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">str++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str - start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = my_strlen(<span class="string">&quot;abc&quot;</span>);<span class="comment">//这里&quot;abc&quot;传入的只有首字母a的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>指针和数组：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>* p = arr;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d]=%p &lt;==&gt; *(p+%d)=%p\n&quot;</span>,i,&amp;arr[i],i,p+i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>arr[i]=*(p+i) =*(arr+i);</p><p>&amp;arr[i]=p+i=arr+i;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">2</span>] &lt;==&gt; *(arr+<span class="number">2</span>) &lt;==&gt; *(p+<span class="number">2</span>) &lt;==&gt; *(<span class="number">2</span>+p) &lt;==&gt; *(<span class="number">2</span>+arr) == <span class="number">2</span>[arr]</span><br></pre></td></tr></table></figure><hr><p>二级指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span>* pa = &amp;a;</span><br><span class="line"><span class="keyword">int</span>** ppa = &amp;pa; </span><br><span class="line">    <span class="comment">//ppa就是一个二级指针，用来存放指针pa，而指针pa也是一个指针，用来存放a。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d\n&quot;</span>, a,*pa,**ppa);<span class="comment">//结果均为3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>禁止套娃！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;4个二进制位可以表示一个16进制数字&lt;/p&gt;
&lt;p&gt;1111 –&amp;gt;f &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;指针类型的意义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;指针类型决定了：指针解引用的权限有多大（整型指针解引用访问4个字节，字符型指针解引用只能访问1个字节）</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="c" scheme="https://youngsay.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Vue笔记：指令</title>
    <link href="https://youngsay.cn/2021/11/06/vue1/"/>
    <id>https://youngsay.cn/2021/11/06/vue1/</id>
    <published>2021-11-06T11:25:01.000Z</published>
    <updated>2021-11-06T12:44:34.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是vue"><a href="#什么是vue" class="headerlink" title="什么是vue"></a>什么是vue</h3><ol><li>构建用户界面</li></ol><ul><li>用vue往html里填充数据</li></ul><ol start="2"><li>框架</li></ol><ul><li>框架是一套现成的解决方案，只能遵守框架规范写自己的业务功能</li></ul><h3 id="vue的特性"><a href="#vue的特性" class="headerlink" title="vue的特性"></a>vue的特性</h3><ol><li>数据驱动视图</li></ol><p>数据的变化会驱动视图自动更新</p><ol start="2"><li>双向数据绑定</li></ol><blockquote><p>在网页中，form表单负责<strong>采集数据</strong>，Ajax负责<strong>提交数据</strong></p></blockquote><ul><li>js数据的变化，会被自动渲染到页面上</li><li>页面上表单采集的数据发生变化时，会被vue自动获取到，更新到js数据中</li></ul><blockquote><p>数据驱动视图和双向数据绑定的底层原理是MVVM（Mode数据源、View视图、ViewModel就是vue实例</p></blockquote><h3 id="vue的基本使用"><a href="#vue的基本使用" class="headerlink" title="vue的基本使用"></a>vue的基本使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 希望vue控制div，把数据填充到div内部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.导入Vue库文件，在window全局就有了vue这个构造函数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.创建Vue的实例对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//el属性是固定写法，表示当前vm实例要控制页面上的那个区域，接受的值是一个选择器</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//date对象就是要渲染到页面的数据</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">username</span>: <span class="string">&#x27;胖虎&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h3><h4 id="1-内容渲染指令"><a href="#1-内容渲染指令" class="headerlink" title="1.内容渲染指令"></a>1.内容渲染指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v-text：会覆盖元素内部原有指令，只能渲染纯文本内容</span><br><span class="line"></span><br><span class="line">&#123;&#123;&#125;&#125; :插值表达式,内容占位符，不会覆盖原有内容，只能渲染纯文本内容，不能用在元素的属性节点</span><br><span class="line"></span><br><span class="line">v-html:把带标签的指令渲染成html内容</span><br></pre></td></tr></table></figure><h4 id="2-属性绑定指令"><a href="#2-属性绑定指令" class="headerlink" title="2.属性绑定指令"></a>2.属性绑定指令</h4><p><code>v-bind</code>: 可简写为<code>:</code>为元素属性动态绑定值</p><ul><li>在使用v-bind属性绑定期间，如果绑定内容需要进行动态拼接，则字符串的外面应该包裹单引号，如：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:title</span>=<span class="string">&quot;&#x27;box&#x27; + index&quot;</span>&gt;</span></span><br><span class="line">    这是一个div</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 <code>&#123;&#123;&#125;&#125;</code>插值表达式和v-bind指令中可以使用js语法</li></ul><h4 id="3-事件绑定指令"><a href="#3-事件绑定指令" class="headerlink" title="3.事件绑定指令"></a>3.事件绑定指令</h4><p><code>v-on:</code>可简写为<code>@</code>，为元素绑定事件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;add&#x27;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    </span><br><span class="line">    add()&#123;</span><br><span class="line">        this.count+=1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果默认对象事件e被覆盖，可以手动传递<code>$event</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;add(1,$event)&#x27;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    </span><br><span class="line">    add(n,e)&#123;</span><br><span class="line">        this.count+=1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><p>在事件处理函数中调用<code>event.preventDefault()</code>和<code>event.stopPropagation()</code>很常见，为了更方便对事件触发进行控制，vue提供了事件修饰符概念。</p><p><code>.prevent</code>：组织默认行为（链接跳转、表单提交）</p><p><code>.stop</code>：阻止事件冒泡</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http:www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    btn()&#123;</span><br><span class="line">        console.log(&quot;hhh&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-双向绑定指令"><a href="#4-双向绑定指令" class="headerlink" title="4.双向绑定指令"></a>4.双向绑定指令</h4><p><code>v-model</code> ：input输入框、textarea、select，v-model 会根据控件类型自动选取正确的方法来更新元素。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>input 元素：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;编辑我……&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>消息是: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">message</span>: <span class="string">&#x27;胖虎&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-model指令修饰符"><a href="#v-model指令修饰符" class="headerlink" title="v-model指令修饰符"></a>v-model指令修饰符</h5><p><code>.number</code>：自动将用户的输入值转为数值类型</p><p><code>.trim</code>：自动过滤用户输入的首尾空白字符</p><h4 id="5-条件渲染指令"><a href="#5-条件渲染指令" class="headerlink" title="5.条件渲染指令"></a>5.条件渲染指令</h4><p><code>v-if</code>：每次动态创建或移除元素，实现元素的显示和隐藏</p><p><code>v-show</code>：动态为元素添加或移除<code>display:none</code>样式，来实现元素的显示和隐藏</p><h4 id="6-列表渲染指令"><a href="#6-列表渲染指令" class="headerlink" title="6.列表渲染指令"></a>6.列表渲染指令</h4><p><code>v-for</code>：用来辅助开发者基于一个数组来循环渲染一个列表结构。v-for 指令需要使用 <code>item in list</code> 形式的特殊语法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-hover table-striped&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>索引<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">    list:[</span><br><span class="line">        &#123;id:1, name:&#x27;胖虎&#x27;&#125;,</span><br><span class="line">        &#123;id:2 ,name:&#x27;大熊&#x27;&#125;,</span><br><span class="line">        &#123;id:3 ,name:&#x27;小夫&#x27;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20211106203347.png" alt="image-20211106202427814"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是vue&quot;&gt;&lt;a href=&quot;#什么是vue&quot; class=&quot;headerlink&quot; title=&quot;什么是vue&quot;&gt;&lt;/a&gt;什么是vue&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;构建用户界面&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;用vue往html里填充数据&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Vue.js" scheme="https://youngsay.cn/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记：条件、循环及其他语句</title>
    <link href="https://youngsay.cn/2021/11/03/python5/"/>
    <id>https://youngsay.cn/2021/11/03/python5/</id>
    <published>2021-11-03T11:25:01.000Z</published>
    <updated>2021-11-05T11:40:51.533Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python基础教程（第三版）第5章：条件、循环及其他语句</p></blockquote><h3 id="print"><a href="#print" class="headerlink" title="print()"></a>print()</h3><p><code>end=&#39;&#39; </code>  //不换行</p><p><code>sep=&#39;&#39;</code>  //自定义分隔符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;my name is&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;panghu&quot;</span>) //打印结果：my name <span class="keyword">is</span> panghu</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I&quot;</span>,<span class="string">&quot;love&quot;</span>,<span class="string">&quot;you&quot;</span>,sep=<span class="string">&quot;!&quot;</span>) //I!love!you</span><br></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>当你确定要导入模块中的一切时，可使用<code>from somemodule import *</code>如果有两个模块，都包某一函数时，可使用<code>as</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> foobar</span><br><span class="line"><span class="built_in">print</span>(foobar.sqrt(<span class="number">4</span>)) //<span class="number">2.0</span></span><br></pre></td></tr></table></figure><h3 id="序列解包"><a href="#序列解包" class="headerlink" title="序列解包"></a>序列解包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">values=<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">x,y,z=values</span><br><span class="line"><span class="built_in">print</span>(values) //(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(z) //<span class="number">3</span></span><br></pre></td></tr></table></figure><p>*元素符：分配多余的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">values=<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line">x,*y,z=values</span><br><span class="line"><span class="built_in">print</span>(x) // <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(y) //[<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(z) //<span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="条件语句中的布尔值"><a href="#条件语句中的布尔值" class="headerlink" title="条件语句中的布尔值"></a>条件语句中的布尔值</h3><p>在Python的条件语句中，不止<code>False``0</code>表示假，<code>None</code>  <code>&quot;&quot;</code> <code>()</code> <code>[]</code> <code>&#123;&#125;</code>都表示假</p><h3 id="循环中的else子句"><a href="#循环中的else子句" class="headerlink" title="循环中的else子句"></a>循环中的else子句</h3><p>python中的<strong>break</strong>、<strong>continue</strong>和c语言中的功能一样。</p><p><strong>break</strong> 语句可以跳出 for 和 while 的循环体。</p><p><strong>continue</strong> 语句被用来跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;循环结束。&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">3</span><br><span class="line">循环结束。</span><br></pre></td></tr></table></figure><p>当将break换成continue时，输出结果是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">循环结束。</span><br></pre></td></tr></table></figure><p>以上和c语言没什么不同，python循环语句有一点与c不同。</p><p>循环语句可以有else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行，但循环被 break 终止时不执行。</p><p>打印100以内的素数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num=[];</span><br><span class="line">i=<span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">100</span>):</span><br><span class="line">    j=<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,i):</span><br><span class="line">        <span class="keyword">if</span>(i%j==<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num.append(i)</span><br><span class="line"><span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p><code>x is y</code> x和y是同一个对象 </p><p><code>x is not y</code> x和y是不同的对象</p><p><code>x in y</code> x是容器（如序列）y的成员 </p><p><code>x not in y</code> x不是容器（如序列）y的成员</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=y=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">z=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(x==z) //<span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(x <span class="keyword">is</span> z) // <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>==用来检查两个对象是否相等，而is用来检查两个对象是否相同（是同一个对象）。</p><h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line"> <span class="built_in">print</span>(key, <span class="string">&#x27;corresponds to&#x27;</span>, d[key])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span><br><span class="line"> <span class="built_in">print</span>(key, <span class="string">&#x27;corresponds to&#x27;</span>, value)</span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h3><p>一个很有用的并行迭代工具是内置函数zip，它将两个序列“缝合”起来，并返回一个由元组组成的序列。返回值是一个适合迭代的对象，要查看其内容，可使用list将其转换为列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=[<span class="string">&quot;panghu&quot;</span>,<span class="string">&quot;daxiong&quot;</span>,<span class="string">&quot;jiqimao&quot;</span>]</span><br><span class="line">age=[<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(name,age))) //[(<span class="string">&#x27;panghu&#x27;</span>, <span class="number">20</span>), (<span class="string">&#x27;daxiong&#x27;</span>, <span class="number">21</span>), (<span class="string">&#x27;jiqimao&#x27;</span>, <span class="number">22</span>)]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Python基础教程（第三版）第5章：条件、循环及其他语句&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;print&quot;&gt;&lt;a href=&quot;#print&quot; class=&quot;headerlink&quot; title=&quot;print()&quot;&gt;&lt;/a&gt;print</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Python" scheme="https://youngsay.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 6入门</title>
    <link href="https://youngsay.cn/2021/10/31/es6/"/>
    <id>https://youngsay.cn/2021/10/31/es6/</id>
    <published>2021-10-31T04:25:01.000Z</published>
    <updated>2021-10-31T12:55:55.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>var和let声明变量的区别：</p><ul><li>let声明的变量是块级变量，只存在{}内。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>会出现<code>Uncaught ReferenceError: a is not defined</code>的报错，而在{}内打印console.log(a)而不会报错。</p><ul><li>let声明的变量没有变量提升</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">let</span> a=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>如上代码会报错<code>Uncaught ReferenceError: Cannot access &#39;a&#39; before initialization</code></p><ul><li>let声明的变量会出现暂时死区</li></ul><p>在{}外用var声明变量，{}内用let声明一个相同的变量，{}外用var声明的变量便没有意义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="keyword">let</span> a=<span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码依旧会报错<code>Uncaught ReferenceError: Cannot access &#39;a&#39; before initialization</code></p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul><li><p>具有块级作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure></li><li><p>声明变量要赋值</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI;</span><br></pre></td></tr></table></figure><p>未初始化会报错<code>Uncaught SyntaxError: Missing initializer in const declaration</code></p><ul><li>常量赋值后，简单数据类型值不能修改，复杂数据类型地址不能更改。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line">a.push(<span class="string">&#x27;Hello&#x27;</span>); <span class="comment">// 可执行</span></span><br><span class="line">a.length = <span class="number">0</span>;    <span class="comment">// 可执行</span></span><br><span class="line">a = [<span class="string">&#x27;Dave&#x27;</span>];    <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><h4 id="数组结构"><a href="#数组结构" class="headerlink" title="数组结构"></a>数组结构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h4 id="对象结构"><a href="#对象结构" class="headerlink" title="对象结构"></a>对象结构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;panghu&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125;=obj;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">//panghu</span></span><br><span class="line"><span class="built_in">console</span>.log(age);  <span class="comment">//20</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数-gt"><a href="#箭头函数-gt" class="headerlink" title="箭头函数=&gt;"></a>箭头函数=&gt;</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum=<span class="function">(<span class="params">n1,n2</span>)=&gt;</span>&#123; </span><br><span class="line">    n1+n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result=sum(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>当键头后的{}内只有一个表达式，可去掉{}；当()里的参数只有一个，可去掉()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> al=<span class="function"><span class="params">v</span>=&gt;</span>alert(v) <span class="comment">//al是函数名，v是函数形参</span></span><br><span class="line"><span class="keyword">const</span> result=al(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sum=<span class="function">(<span class="params">a,...b</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">//3</span></span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">//[4,5]</span></span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> students = [<span class="string">&#x27;胖虎&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [s1, ...s2] = students; </span><br><span class="line"><span class="built_in">console</span>.log(s1);  <span class="comment">// &#x27;胖虎&#x27; </span></span><br><span class="line"><span class="built_in">console</span>.log(s2);  <span class="comment">// [&#x27;张三&#x27;, &#x27;李四&#x27;]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;let&quot;&gt;&lt;a href=&quot;#let&quot; class=&quot;headerlink&quot; title=&quot;let&quot;&gt;&lt;/a&gt;let&lt;/h3&gt;&lt;p&gt;var和let声明变量的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;let声明的变量是块级变量，只存在{}内。&lt;/li&gt;
&lt;/ul&gt;
&lt;fig</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://youngsay.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>c语言：操作符误区总结</title>
    <link href="https://youngsay.cn/2021/10/24/c-operator/"/>
    <id>https://youngsay.cn/2021/10/24/c-operator/</id>
    <published>2021-10-24T14:31:01.000Z</published>
    <updated>2022-01-23T12:10:08.463Z</updated>
    
    <content type="html"><![CDATA[<ul><li>左移操作符：<code>&lt;&lt;</code></li></ul><blockquote><p> 左边丢弃，右边补0</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//把a的二进制位向左移动一位</span></span><br><span class="line"><span class="keyword">int</span> b = a &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>, b);<span class="comment">//输出为4</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>右移操作符：<code>&gt;&gt;</code></li></ul><blockquote><p>1.算术右移：右边丢弃，左边补原符号位</p><p> 2.逻辑右移：右边丢弃，左边补0</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">-3</span>;</span><br><span class="line"><span class="keyword">int</span> b = a &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b); <span class="comment">//输出为-2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>负数在内存中存放的是二进制的补码。</p><p>原码：直接根据数值写出的二进制序列</p><p>反码：符号位不变，其他位按位取反</p><p>补码：反码+1</p></blockquote><p>以-3为例：</p><p>原码：10000000000000000000000000000011</p><p>反码：11111111111111111111111111111100</p><p>补码：11111111111111111111111111111101</p><hr><ul><li>异或：<code>^</code></li></ul><blockquote><p>同为0，异为1</p></blockquote><p>练习：a=3，b=5，交换a、b两个数的值</p><p>方法1：创建中间变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>, a, b); <span class="comment">//a=5,b=3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：加减运算（数值太大可能溢出）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">a = a + b;</span><br><span class="line">b = a - b; </span><br><span class="line">a = a - b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>, a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三：异或运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b; </span><br><span class="line">a = a ^ b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>, a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同值异或值为0，任何值异或0都是值本身。a^a=0     0^a=a</p><hr><p>单目运算符：</p><p><code>sizeof</code>也是单目运算符，可以计算变量所占空间的大小，单位是字节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a));<span class="comment">//4    </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//4   </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr));<span class="comment">//20  sizeof(数组名)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span> [<span class="number">5</span>]));<span class="comment">//20  sizeof(数组类型)</span></span><br></pre></td></tr></table></figure><p><code>sizeof</code>()，括号内可以说变量名，也可以是变量类型，如果是变量名可以去掉小括号，如<code>sizeof a</code></p><p>思考一下下面这段代码，两次输出是什么？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(s = a + <span class="number">2</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s);</span><br></pre></td></tr></table></figure><p>输出结果是2、5。s的类型是short，sizeof(short)结果必然是2，而<strong>sizeof括号里的表达式不参与运算</strong>，所以s仍未5。</p><p>前置和后置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;<span class="comment">//后置++，先使用，再++</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);<span class="comment">//11</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = ++a;<span class="comment">//前置++，先++，后使用</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);<span class="comment">//11</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);<span class="comment">//11</span></span><br></pre></td></tr></table></figure><p><strong>指针大小永远是4字节或8字节</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">(<span class="keyword">int</span> arr[])</span><span class="comment">//相当于int *arr</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr));<span class="comment">//4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">(<span class="keyword">char</span> ch[])</span><span class="comment">//相当于char *arr</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(ch));<span class="comment">//4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr));<span class="comment">//40</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(ch));<span class="comment">//10</span></span><br><span class="line">test1(arr);</span><br><span class="line">test2(arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>结构成员访问操作符：<code>.</code> <code>-&gt;</code></p><blockquote><p>. 结构体.成员名 </p><p>-&gt; 结构体指针-&gt;成员名</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">students</span></span></span><br><span class="line"><span class="class">&#123;</span>   <span class="comment">//结构体的成员（变量）</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">students</span> <span class="title">a</span> =</span> &#123; <span class="string">&quot;胖虎&quot;</span>,<span class="number">20</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">students</span> *<span class="title">pb</span> =</span> &amp;a; <span class="comment">//说明pb是struct students类型的指针</span></span><br><span class="line"><span class="comment">//结构体变量名.成员名</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名：%s，年龄：%d\n&quot;</span>, a.name,a.age);</span><br><span class="line"><span class="comment">//结构体指针-&gt;成员名</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名：%s，年龄：%d&quot;</span>, pb-&gt;name,pb-&gt;age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20211024214557.png" alt="image-20211024164538183"></p><hr><p>整型提升：</p><p>C的整型算术运算总是至少以缺省整型类型的精度来进行的。 为了获得这个精度，表达式中的字符和短整型操作数在使用之前被转换为普通整型，这种转换称为整型提升。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//0000000000000000000000000000011   (int a)</span></span><br><span class="line"><span class="comment">//00000011  --a</span></span><br><span class="line"><span class="comment">//0000000000000000000000000000011   (a的整型提升)</span></span><br><span class="line"><span class="keyword">char</span> b = <span class="number">127</span>;</span><br><span class="line"><span class="comment">//0000000000000000000000001111111   (int b)</span></span><br><span class="line"><span class="comment">//01111111   --b</span></span><br><span class="line"><span class="comment">//0000000000000000000000001111111   (b的整型提升)</span></span><br><span class="line"><span class="comment">//0000000000000000000000010000010   int c</span></span><br><span class="line"><span class="comment">//10000010   --c</span></span><br><span class="line"><span class="comment">//1111111111111111111111110000010  补码 (c的整型提升)</span></span><br><span class="line"><span class="comment">//1000000000000000000000001111101  反码</span></span><br><span class="line"><span class="comment">//1000000000000000000000001111110  原码</span></span><br><span class="line"><span class="keyword">char</span> c = a + b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>整形提升是按照变量的数据类型的符号位来提升的</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//负数的整形提升</span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="number">-1</span>;</span><br><span class="line">变量c1的二进制位(补码)中只有<span class="number">8</span>个比特位：</span><br><span class="line"><span class="number">1111111</span></span><br><span class="line">因为 <span class="keyword">char</span> 为有符号的 <span class="keyword">char</span></span><br><span class="line">所以整形提升的时候，高位补充符号位，即为<span class="number">1</span></span><br><span class="line">提升之后的结果是：</span><br><span class="line"><span class="number">11111111111111111111111111111111</span></span><br><span class="line"><span class="comment">//正数的整形提升</span></span><br><span class="line"><span class="keyword">char</span> c2 = <span class="number">1</span>;</span><br><span class="line">变量c2的二进制位(补码)中只有<span class="number">8</span>个比特位：</span><br><span class="line"><span class="number">00000001</span></span><br><span class="line">因为 <span class="keyword">char</span> 为有符号的 <span class="keyword">char</span></span><br><span class="line">所以整形提升的时候，高位补充符号位，即为<span class="number">0</span></span><br><span class="line">提升之后的结果是：</span><br><span class="line"><span class="number">00000000000000000000000000000001</span></span><br><span class="line"><span class="comment">//无符号整形提升，高位补0</span></span><br></pre></td></tr></table></figure><p>总结：char和short类型，在参与表达式运算时达不到整型长度，会发生整型提升。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;左移操作符：&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt; 左边丢弃，右边补0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="c" scheme="https://youngsay.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c语言：数组误区总结</title>
    <link href="https://youngsay.cn/2021/10/22/c-array/"/>
    <id>https://youngsay.cn/2021/10/22/c-array/</id>
    <published>2021-10-22T12:31:01.000Z</published>
    <updated>2022-01-23T12:10:22.031Z</updated>
    
    <content type="html"><![CDATA[<ul><li>创建数组时，数组的长度必须用常量表达式进行定义，较好的方法是用宏来定义数组。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10;</span></span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br></pre></td></tr></table></figure><p>但在C99中的变长数组，也可以使用非常量表达式。</p><hr><ul><li>关于字符数组的初始化，使用方法2初始化数组会在末尾自动创建\0。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch1[] = &#123; <span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;u&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> ch2[] = <span class="string">&quot;panghu&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20211022203210.png" alt="image-20211019213809977"></p><p>这就会导致打印结果、字符串长度的不同。</p><p>strlen() 函数从字符串的开头位置依次向后计数，直到遇见<code>\0</code>，然后返回计时器的值。最终统计的字符串长度不包括<code>\0</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch1[] = &#123; <span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;u&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> ch2[] = <span class="string">&quot;panghu&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%d\n&quot;</span>, ch1, <span class="built_in">strlen</span>(ch1));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%d\n&quot;</span>, ch2,<span class="built_in">strlen</span>(ch2));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20211022203216.png" alt="image-20211019215310977"></p><p>因为数组ch1没有添加终止符<code>\0</code>，打印内容出现了意外，字符串长度也是一个随机数。</p><hr><ul><li>由数组中各元素的地址可知，一维数组在内存中是连续存放的，随着数组下标的增长，地址由低到高变化。（二维数组也是如此）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d]=%p\n&quot;</span>, i,&amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20211022203224.png" alt="image-20211019221954024"></p><p>所以当我们知道数组中首元素的地址，便可以打印出所有元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> *p = arr;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[%d]=%d\n&quot;</span>,i, *p);</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20211022203231.png" alt="image-20211019222801287"></p><hr><ul><li>关于arr和&amp;arr：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr); <span class="comment">//首元素地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr)); <span class="comment">//整个数组的大小</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr); <span class="comment">//整个数组的地址</span></span><br></pre></td></tr></table></figure><p>数组名是首元素的地址。</p><p><code>sizeof(数组名)</code>表示的是整个数组的大小，单位是字节。</p><p><code>&amp;数组名</code>表示的是整个数组，取出的是整个数组的地址。</p><p>首元素地址和数组地址的值是一样的，但意义不同，可以试着输出<code>&amp;数组名+1</code>和<code>数组名+1</code>，进行比较。</p><hr><ul><li>数组作为函数传参时，形参可以写成两种形式：</li></ul><p>一是数组形式，二是指针形式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> arr[<span class="number">10</span>])</span> <span class="comment">//写法②：void test(int *arr)&#123;&#125;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br><span class="line">test(arr); <span class="comment">//函数调用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;创建数组时，数组的长度必须用常量表达式进行定义，较好的方法是用宏来定义数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="c" scheme="https://youngsay.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>WebApiⅢ：事件、事件对象</title>
    <link href="https://youngsay.cn/2021/09/16/js-shijian/"/>
    <id>https://youngsay.cn/2021/09/16/js-shijian/</id>
    <published>2021-09-16T09:45:54.000Z</published>
    <updated>2021-09-16T13:07:35.955Z</updated>
    
    <content type="html"><![CDATA[<h3 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h3><ol><li>传统方式   <code>btn.onclick = function() &#123;&#125;</code></li></ol><p>传统事件注册具有<strong>唯一性</strong>：同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</p><ol start="2"><li>方法监听注册方式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.addEventListener(type,listener[,useCapture])</span><br></pre></td></tr></table></figure><p>type：事件类型字符串，比如 click、mouseover。这里不需要加on<br>listener：事件处理函数，事件发生时，会调用该监听函数<br>useCapture：可选参数，是一个布尔值，默认是false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        传统注册事件</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        事件监听注册事件</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//传统注册事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            alert(<span class="string">&#x27;hi&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            alert(<span class="string">&#x27;传统注册事件&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//运行程序，点击传统注册事件按钮，弹出提示框：传统注册事件。第一个hi提示框被覆盖，不会弹出。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        </span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//事件侦听注册事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btns[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            alert(<span class="string">&#x27;事件监听注册事件&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btns[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            alert(<span class="string">&#x27;事件监听注册事件2&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//运行程序，点击事件监听注册事件按钮，弹出提示框：事件监听注册事件，点击确定后，再次弹出“事件监听注册事件2”的提示框</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//在事件侦听注册事件的方法中事件类型要加引号并且没有on</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h3><ol><li><p>传统方式 <code>eventTarget.onclick = null;</code></p></li><li><p>方法监听注册方式</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.removeEventListener(type,listener[,useCapture])</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="number">1</span>&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    divs[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="number">11</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 1. 传统方式删除事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        divs[<span class="number">0</span>].onclick = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 2. removeEventListener 删除事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    divs[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>, fn) <span class="comment">// 里面的fn 不需要调用加小括号</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="number">22</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        divs[<span class="number">1</span>].removeEventListener(<span class="string">&#x27;click&#x27;</span>, fn);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h3><p>事件流描述的是从页面接受事件的顺序，这个传播顺序就是DOM事件流。</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210915214418.png" alt="1551166555833"></p><p>DOM事件流会历经 捕获阶段、当前目标阶段、冒泡阶段 这三个阶段</p><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210915214530.png" alt="1551169007768"></p><ul><li>js代码只能执行捕获或冒泡其中的一个阶段</li><li>onclick、attachEvent只有冒泡阶段</li><li>addEventListener(type,listener,<strong>true</strong>)表示在<strong>事件捕获阶段</strong>调用事件处理程序，如果第三个参数是<strong>false</strong>表示在<strong>事件冒泡阶段</strong>调用事件处理程序。</li></ul><h4 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;father&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// onclick 和 attachEvent（ie） 在冒泡阶段触发</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 冒泡阶段 如果addEventListener 第三个参数是 false 或者 省略 </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// son -&gt; father -&gt;body -&gt; html -&gt; document</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> son = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 给son注册单击事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    son.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="string">&#x27;son&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 给father注册单击事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> father = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.father&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    father.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="string">&#x27;father&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 给document注册单击事件，省略第3个参数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="string">&#x27;document&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;father&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 如果addEventListener() 第三个参数是 true 那么在捕获阶段触发</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// document -&gt; html -&gt; body -&gt; father -&gt; son</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> son = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 给son注册单击事件，第3个参数为true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     son.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         alert(<span class="string">&#x27;son&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;, <span class="literal">true</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> father = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.father&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 给father注册单击事件，第3个参数为true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     father.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         alert(<span class="string">&#x27;father&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;, <span class="literal">true</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 给document注册单击事件，第3个参数为true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        alert(<span class="string">&#x27;document&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="literal">true</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象。</p><p>比如：  </p><ol><li><p>谁绑定了这个事件。</p></li><li><p>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置。</p></li><li><p>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="number">123</span>&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 事件对象 可以写成e、evt、event</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            e = e || <span class="built_in">window</span>.event; <span class="comment">//兼容性写法 </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(e);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="事件对象的属性和方法"><a href="#事件对象的属性和方法" class="headerlink" title="事件对象的属性和方法"></a>事件对象的属性和方法</h4></li></ol><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210915221631.png" alt="1551169931778"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ul.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="comment">// 我们给ul 绑定了事件  那么this 就指向ul  </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// ul</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="comment">// e.target 触发了事件的对象 我们点击的是li e.target 指向的就是li</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">console</span>.log(e.target); <span class="comment">// li</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h4><p>html中一些标签有默认行为，例如a标签被单击后，默认会进行页面跳转。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;https://blog.wangyouwu.cn&quot;</span>&gt;胖虎同学&lt;/a&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 2. 阻止默认行为 让链接不跳转 </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> a = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;a&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    a.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         e.preventDefault(); <span class="comment">//  dom 标准写法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 3. 传统的注册方式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    a.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 普通浏览器 e.preventDefault();  方法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        e.preventDefault();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 低版本浏览器 ie678  returnValue  属性</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        e.returnValue = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 我们可以利用return false 也能阻止默认行为 没有兼容性问题</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;father&quot;</span>&gt;</span><br><span class="line">     <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son儿子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> son = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 给son注册单击事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     son.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         alert(<span class="string">&#x27;son&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         e.stopPropagation(); <span class="comment">// stop 停止  Propagation 传播</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>; <span class="comment">// 非标准 cancel 取消 bubble 泡泡</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> </span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> father = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.father&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 给father注册单击事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     father.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         alert(<span class="string">&#x27;father&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 给document注册单击事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         alert(<span class="string">&#x27;document&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>事件委托也称为事件代理，在 jQuery 里面称为事件委派。</p><p>给父元素注册事件，利用事件冒泡，当子元素的事件触发，会冒泡到父元素，然后去控制相应的子元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>点我一下试试<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>点我一下试试<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>点我一下试试<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>点我一下试试<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>点我一下试试<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ul.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// e.target 这个可以得到我们点击的对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        e.target.style.backgroundColor = <span class="string">&#x27;pink&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="常用鼠标事件"><a href="#常用鼠标事件" class="headerlink" title="常用鼠标事件"></a>常用鼠标事件</h3><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210916165625.png" alt="1551172699854"></p><p>禁止鼠标右键 <code>contextmenu</code></p><p>禁止鼠标选中 <code>selectstar</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    休想复制我</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 1. contextmenu 禁用右键菜单</span></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                e.preventDefault();</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 2. selectstart 禁止选中文字 </span></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;selectstart&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h4><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210916165853.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// 鼠标事件对象 MouseEvent</span></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 1. client 鼠标在可视区的x和y坐标</span></span><br><span class="line">            <span class="built_in">console</span>.log(e.clientX);</span><br><span class="line">            <span class="built_in">console</span>.log(e.clientY);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;---------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. page 鼠标在页面文档的x和y坐标</span></span><br><span class="line">            <span class="built_in">console</span>.log(e.pageX);</span><br><span class="line">            <span class="built_in">console</span>.log(e.pageY);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;---------------------&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 3. screen 鼠标在电脑屏幕的x和y坐标</span></span><br><span class="line">            <span class="built_in">console</span>.log(e.screenX);</span><br><span class="line">            <span class="built_in">console</span>.log(e.screenY);</span><br><span class="line">    </span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h3><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210916210400.png" alt="1551318122855"></p><ul><li>onkeypress不识别功能键，如shift等，但区分大小写</li><li>三个事件执行顺序：keydown、keypress、keyup</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 常用的键盘事件</span></span><br><span class="line">    <span class="comment">//1. keyup 按键弹起的时候触发 </span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我弹起了&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. keypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头啊</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keypress&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;我按下了press&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//2. keydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头啊</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keydown&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;我按下了down&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 4. 三个事件的执行顺序  keydown -- keypress -- keyup</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="键盘事件对象"><a href="#键盘事件对象" class="headerlink" title="键盘事件对象"></a>键盘事件对象</h4><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210916210632.png" alt="1551318355505"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;up:&#x27;</span> + e.keyCode);</span><br><span class="line">        <span class="comment">// 我们可以利用keycode返回的ASCII码值来判断用户按下了那个键</span></span><br><span class="line">        <span class="keyword">if</span> (e.keyCode === <span class="number">65</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;您按下的a键&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">&#x27;您没有按下a键&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keypress&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log(e);</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;press:&#x27;</span> + e.keyCode);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;注册事件&quot;&gt;&lt;a href=&quot;#注册事件&quot; class=&quot;headerlink&quot; title=&quot;注册事件&quot;&gt;&lt;/a&gt;注册事件&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;传统方式   &lt;code&gt;btn.onclick = function() &amp;#123;&amp;#125;&lt;/code</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://youngsay.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>WebApiⅡ：自定义属性、节点</title>
    <link href="https://youngsay.cn/2021/09/13/js-node/"/>
    <id>https://youngsay.cn/2021/09/13/js-node/</id>
    <published>2021-09-13T13:45:54.000Z</published>
    <updated>2021-09-16T09:05:23.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><h3 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h3><ul><li><p>element.属性 ：获取内置属性值</p></li><li><p>element.getAttribute(‘属性’) ：获取自定义属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;demo&quot;</span> index=<span class="string">&quot;1&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;nav&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 1. 获取元素的属性值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// (1) element.属性</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.id);  <span class="comment">//demo</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//(2) element.getAttribute(&#x27;属性&#x27;) </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;id&#x27;</span>)); <span class="comment">//demo</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;index&#x27;</span>)); <span class="comment">//1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="设置属性值"><a href="#设置属性值" class="headerlink" title="设置属性值"></a>设置属性值</h3><ul><li>element.属性 = ‘属性值’</li><li>element.setAttribute (‘属性’,’属性值’) ：设置自定义属性值</li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1) element.属性= &#x27;值&#x27;</span></span><br><span class="line">  div.id = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">  div.className = <span class="string">&#x27;navs&#x27;</span>;</span><br><span class="line"><span class="comment">// (2) element.setAttribute(&#x27;属性&#x27;, &#x27;值&#x27;);  主要针对于自定义属性</span></span><br><span class="line">  div.setAttribute(<span class="string">&#x27;index&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">  div.setAttribute(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>); </span><br></pre></td></tr></table></figure><h3 id="移除属性"><a href="#移除属性" class="headerlink" title="移除属性"></a>移除属性</h3><p><code>element.removeAttribute (&#39;属性&#39;)</code></p><h3 id="h5自定义属性"><a href="#h5自定义属性" class="headerlink" title="h5自定义属性"></a>h5自定义属性</h3><p>自定义属性获取是通过getAttribute(‘属性’) 获取。</p><p>但是有些自定义属性很容易引起歧义，不容易判断是元素的内置属性还是自定义属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div getTime=<span class="string">&quot;20&quot;</span> data-index=<span class="string">&quot;2&quot;</span> data-list-name=<span class="string">&quot;andy&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// console.log(div.getTime);</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;getTime&#x27;</span>));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    div.setAttribute(<span class="string">&#x27;data-time&#x27;</span>, <span class="number">20</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;data-index&#x27;</span>));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;data-list-name&#x27;</span>));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// h5新增的获取自定义属性的方法 它只能获取data-开头的</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// dataset 是一个集合里面存放了所有以data开头的自定义属性</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.dataset);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.dataset.index);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.dataset[<span class="string">&#x27;index&#x27;</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 如果自定义属性里面有多个-链接的单词，我们获取的时候采取 驼峰命名法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.dataset.listName);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(div.dataset[<span class="string">&#x27;listName&#x27;</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p>网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使用 node 来表示。</p><p>一般地，节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性。</p><ul><li><p>元素节点 nodeType 为1</p></li><li><p>属性节点 nodeType 为2</p></li><li><p>文本节点 nodeType 为3（文字、空格、换行）</p><p><strong>实际开发中，节点操作主要操作元素节点</strong></p></li></ul><h3 id="父级节点"><a href="#父级节点" class="headerlink" title="父级节点"></a>父级节点</h3><p><code>node.parentNode</code></p><p>parentNode返回某节点的父节点（最近的），没有则返回null</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;demo&quot;</span>&gt;</span><br><span class="line">       <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dad&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="built_in">console</span>.log(son.parentNode);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h3><p><code>parentNode.chlidNodes</code>(标准)</p><p>返回值包含所有子节点，包括元素、文本节点等，so一般不用childNodes</p><p><code>parentNode.children</code>(非标准)</p><p>返回值只有元素字节，so提倡用children</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>胖虎同学<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>panghutx<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>www.wangyouwu.cn<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>blog.wangyouwu.cn<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// DOM 提供的方法（API）获取</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> lis = ul.querySelectorAll(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 1. 子节点  childNodes 所有的子节点 包含 元素节点 文本节点等等</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(ul.childNodes);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(ul.childNodes[<span class="number">0</span>].nodeType); <span class="comment">//3</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(ul.childNodes[<span class="number">1</span>].nodeType); <span class="comment">//1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 2. children 获取所有的子元素节点 也是我们实际开发常用的</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(ul.children); </span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(ul.children[<span class="number">0</span>]); <span class="comment">//第一个li</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(ul.children[ul.children.length - <span class="number">1</span>]);<span class="comment">//最后一个li</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="创建-添加节点"><a href="#创建-添加节点" class="headerlink" title="创建/添加节点"></a>创建/添加节点</h3><ol><li><p>创建节点</p><p><code>document.creatElement(&#39;tagName&#39;)</code></p></li><li><p>添加节点</p><p><code>node.appendChild(child)</code>   将节点添加到父节点的子节点列表末尾</p><p><code>node.inserBefore(child,指定元素)</code>   将节点添加到父节点的子节点列表开头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>胖虎同学<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 1. 创建节点元素节点</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 2. 添加节点 node.appendChild(child)  node 父级  child 是子级 后面追加元素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ul.appendChild(li);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 3. 添加节点 node.insertBefore(child, 指定元素);</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> lili = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ul.insertBefore(lili, ul.children[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 4. 我们想要页面添加一个新的元素 ： 1. 创建元素 2. 添加元素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p><code>node.removeChild()</code></p><p>从node节点中删除子节点，返回的是删除节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;删除&lt;/button&gt;</span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>胖虎<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>胖虎同学<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>胖虎同学的博客<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="comment">// 1.获取元素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="comment">// 2. 删除元素  node.removeChild(child)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="comment">// ul.removeChild(ul.children[0]);</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="comment">// 3. 点击按钮依次删除里面的孩子</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="keyword">if</span> (ul.children.length == <span class="number">0</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">             <span class="built_in">this</span>.disabled = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">             ul.removeChild(ul.children[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><p><code>node.cloneNode()</code></p><ul><li>如果括号参数为空或false，则为浅拷贝，只克隆节点本身，不克隆里面的子节点</li><li>括号参数为true，则为深拷贝，会克隆字节本身以及里面所有子节点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 1. node.cloneNode(); 括号为空或者里面是false 浅拷贝 只复制标签不复制里面的内容</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 2. node.cloneNode(true); 括号为true 深拷贝 复制标签复制里面的内容</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> lili = ul.children[<span class="number">0</span>].cloneNode(<span class="literal">true</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ul.appendChild(lili);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="DOM重点总结"><a href="#DOM重点总结" class="headerlink" title="DOM重点总结"></a>DOM重点总结</h2><p>文档对象模型（Document Object Model），处理可拓展标记语言的编程接口，可以改变网页内容、结构、样式。</p><p>关于DOM操作，主要针对元素操作，主要有创建、增删改查、属性操作、实践操作。</p><ul><li>创建：</li></ul><p><code>document.write</code> <code>innerHTML</code> <code>creatElement</code></p><ul><li>增加</li></ul><p><code>appendChild</code> <code>insertBefore</code></p><ul><li>删除</li></ul><p><code>removeChild</code></p><ul><li>改</li></ul><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210914151227.png" alt="1551164907830"></p><ul><li>查</li></ul><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210914151205.png" alt="1551164936214"></p><ul><li>属性操作</li></ul><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210914151306.png" alt="1551164985383"></p><ul><li>事件操作</li></ul><p><img src="https://gitee.com/panghutx/tuchuang/raw/master/20210914151350.png" alt="1551172699854"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自定义属性&quot;&gt;&lt;a href=&quot;#自定义属性&quot; class=&quot;headerlink&quot; title=&quot;自定义属性&quot;&gt;&lt;/a&gt;自定义属性&lt;/h2&gt;&lt;h3 id=&quot;获取属性值&quot;&gt;&lt;a href=&quot;#获取属性值&quot; class=&quot;headerlink&quot; title=&quot;获取属</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://youngsay.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>《认知觉醒》：真正的成长不是懂得多少道理，而是做出多少改变</title>
    <link href="https://youngsay.cn/2021/09/05/read-renzhi/"/>
    <id>https://youngsay.cn/2021/09/05/read-renzhi/</id>
    <published>2021-09-05T10:49:01.000Z</published>
    <updated>2021-09-05T10:16:09.983Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>年轻的时候，人人都自命不凡，认定美好生活会自然到来。后来他们不得不敲碎那颗高傲的心，在无奈和叹息中接受平庸的自己。</p></blockquote><p>杨绛说：“你的问题在于想得太多，读书太少”。学而不思则罔，思而不学则怠，学习和思考是缺一不可的。看完《认知觉醒》，我觉得还有一点更重要的，行动。“道理我都懂，就是做不到”，“听过很多道理，依然过不好这一生”，都是因为缺少行动。懂得百点不如改变一点，真正的成长不是懂得多少道理，而是做出多少改变。</p><h3 id="做出行动和改变"><a href="#做出行动和改变" class="headerlink" title="做出行动和改变"></a>做出行动和改变</h3><p>急于求成、避难趋易是人的天性。从难度上来讲，阅读&lt;思考&lt;行动，一些人往往选择最简单的阅读，却不愿行动，这是避难趋易的天性；读完一本书马不停蹄地读下一本，没有思考和行动，却又想立刻见到成效，这是急于求成的天性。就功课的学习而言，我喜欢看视频学习，很少刷题。我知道刷题能取得更快的提升，但我还是看视频来麻木自己。因为相对刷题，看视频是更省力的方式，这都是避难趋易的天性在作怪。所以一件事如何去做，不必去找什么方法技巧，你最不愿意尝试的那个就是最有效的方法。什么最重要，每个人都心知肚明，却不愿面对，人们愿意活在自己的舒适区。</p><blockquote><p>正确的行动往往是反天性的，让你觉得舒服和容易的事往往得不到好结果， 而一开始你认为难受和困难的事才能让你真正产生收获，</p></blockquote><h3 id="活在舒适区边缘"><a href="#活在舒适区边缘" class="headerlink" title="活在舒适区边缘"></a>活在舒适区边缘</h3><p>活在轻车熟路的舒适区不会有任何提升，闯入望尘莫及的困难区也很难进步，我们应该在舒适区边缘不断试探。在舒适区边缘，既有挑战又有成就，能够不断扩宽自己舒适区的边界。如果只是阅读，就是单纯的输入，这是活在自己的舒适区，不会有成效。而阅读时的思考，思考后的改变，就是在舒适区的边缘试探，虽然有挑战但有收获。很多人的焦虑痛苦就是只顾着表层的学习，努力到感动自己，却一直没有跳出舒适区。如果不关注思考、行动、改变，就不会学有所获，还会怀疑是自己学的不够，陷入“越学越焦虑”的怪圈。</p><blockquote><p>“多即是少，少即是多”，停在表层，我们就会陷入欲望漩涡，什么都想学、什么都想要，忙忙碌碌却收效甚微；若是能深入底层，盯住实际改变，我们就能跳出盲目、焦虑、浮躁的怪圈。</p></blockquote><p>读一本书，不求记住多少知识。哪怕一个观点对你有益，让你因此改变，这就够了，因为你已经走出了舒适区。舒适区边缘10%的努力，也要胜过舒适区100%的努力（自我欺骗）。活在舒适区边缘，不专注表面，就会走出焦虑怪圈。怕什么真理无穷，进一步有进一步的欢喜。</p><h3 id="找寻更好的视角"><a href="#找寻更好的视角" class="headerlink" title="找寻更好的视角"></a>找寻更好的视角</h3><blockquote><p>无论你当前处于何种情绪旋涡，只要自己愿意， 总能找到更好的角度。 只是有的人面对再好的事情时都盯着一点瑕疵不放， 而有的 人却能从任何一件糟糕的事情中找到闪光点并放大，忽视其他不足之处。</p></blockquote><p>就像《被讨厌的勇气》所说的，要寻找更大的共同体。不要拘泥于一个共同体，不要只看到一个视角。身处逆境，有的人深陷其中不能自拔，有的人处在逆境却不自知，反而乐在其中。一辆车停在那里不动，我们可以找到一个更好的角度去拍摄它。一件事也许不能改变，但我们可以改变看待事情的态度。就像”塞翁失马，焉知非福“，”祸兮福所倚，福兮祸所伏“，”反者道之动“，这都是事物发展的规律、是哲学的智慧，不是一种自我欺骗。即使有人仍认为这是一种自我欺骗，但我们每天不都是在自我欺骗吗。人就是解释型动物，活着有意义吗，人们为了有意义，赋予了活着的意义；世界有意义吗，人们为了有意义，赋予了世界的意义。</p><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><ul><li>“ 刻意练习四要素”：定义明确的目标、极度的专注、有效的反馈、在拉伸区练习。</li><li>时常问自己：这个道理还能用在什么地方？</li><li>游戏心态：我不是在做这件事，我是在做另一件事。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;年轻的时候，人人都自命不凡，认定美好生活会自然到来。后来他们不得不敲碎那颗高傲的心，在无奈和叹息中接受平庸的自己。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;杨绛说：“你的问题在于想得太多，读书太少”。学而不思则罔，思而不学则怠，学习和思考是缺一不</summary>
      
    
    
    
    <category term="日常" scheme="https://youngsay.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="阅读" scheme="https://youngsay.cn/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>【第三期】我爱记单词😎</title>
    <link href="https://youngsay.cn/2021/09/01/word3/"/>
    <id>https://youngsay.cn/2021/09/01/word3/</id>
    <published>2021-09-01T10:07:01.000Z</published>
    <updated>2021-09-09T09:18:02.631Z</updated>
    
    <content type="html"><![CDATA[<h3 id="9-1"><a href="#9-1" class="headerlink" title="9.1"></a>9.1</h3><ol><li>craft</li></ol><p>n. 工艺，手艺；飞机；宇宙飞船；航天器；技巧；传统或人工的饮食</p><p>v. 精心制作（尤指手工）   <strong>draft</strong></p><ol start="2"><li>comply</li></ol><p>v.遵从、顺从    <strong>agree  consent  approve   subscribe permission</strong></p><ol start="3"><li> preserve</li></ol><p>v.保护、维持、禁猎  n.禁猎区、保护区、加工成的食品</p><p><strong>reserve conserve retain remain</strong> <em>severe</em></p><ol start="4"><li>proceed</li></ol><p>v. 开始行动；开展，（行动）进行；继续；接着做</p><p><strong>process procession procedure</strong></p><ol start="5"><li><p>clap  v/n.击掌👏</p></li><li><p>collapse</p><p>v. 突然失败；崩溃；倒闭；（因生病或受伤而）昏倒；（价格）突然下跌；（货币）突然贬值；</p><p>n. 倒塌；突然倒闭；崩溃；瓦解</p></li></ol><p>col(表加强）+lapse（滑倒）=彻底滑倒=崩溃；倒坍  <strong>slide</strong></p><ol start="7"><li><p>principle</p><p>n. 原理，原则；（个人行为）准则；规范；定理</p></li><li><p>hazard<br>n. 危险，风险<br>v. 冒失地提出，冒险猜测；冒…的风险；使处于危险</p></li><li><p>flaw<br>n. （物质或物件的）瑕疵，缺陷，毛病；（人性格中的）毛病，缺陷<br>v. 损害；削弱；使失效    <strong>law</strong></p></li><li><p>snack<br>n. （两餐之间的）点心，小吃<br>v. 吃零食；吃快餐   <strong>snake  neck</strong></p></li><li><p>contrast<br>n. （明显的）差别（尤指反差）；对比，对照；对照物，对立面<br>v. （使成）对比，（使成）对照  <strong>contract</strong></p></li><li><p>survival<br>n. 生存；继续存活，（尤指在困境中的）幸存；幸存事物  <strong>survive</strong></p></li><li><p>cite<br>v. 引用（文章，书本，作家）以作为论据或说明之证，引证；举例；嘉奖 <strong>quote</strong></p></li></ol><h3 id="9-2"><a href="#9-2" class="headerlink" title="9.2"></a>9.2</h3><ol><li>accidental<br>adj. 意外的，偶然的；非故意的 <strong>accident</strong></li><li>trial<br>n. 考验，试验，测试；审判；（对人的忍耐、自制力的）考验，磨练</li><li>perceive<br>v. 把（人，物）看作，认为；察觉，感觉，认知；认识到，意识到；理解<br>perceive as 视为；当作</li><li>rebel<br>n. 反叛分子，造反者，叛逆者，起义者<br>v. 造反，反抗；反对；不服从，抗命<br>rebel against v. 反抗</li><li>disguise<br>v. 伪装；掩饰，掩盖<br>n. 装扮，伪装  <strong>hide  conceal</strong></li><li>carrier<br>n. 通讯公司；运输工具   <strong>career</strong></li><li>lodge<br>v. 提出（投诉、抗议等）；<strong>把…嵌入；租房；</strong>暂住，借宿<br>n. 传达室, （供参加户外运动者暂住的）乡间小屋, 门房, 管理员室</li><li>conform<br>v. 遵守社会接受的习俗（或规范）；顺从；符合（规则，标准，法律）<strong>comply confirm</strong></li><li>thirsty<br>adj. 渴的，口干的；渴望的</li><li>property<br>n. 房地产；个人财产，资产；所有物；【律】所有权，处置权；特性，性质 <strong>proper estate</strong></li><li>revenue<br>n. （国家）岁入，税收；（尤指公司或组织数额庞大的）收入，收益</li><li>protein<br>n. 【总称】（尤指作为饮食成分）蛋白质；朊</li><li>deficiency<br>n. 缺乏，不足；缺陷，缺点<br>缺点 defect; disadvantage; weakness; shortcoming;</li><li>thrive<br>v. 兴旺发达，繁荣；旺盛；茁壮成长；植物茂盛生长 <strong>flourish</strong></li><li>dump<br>vt. 堆放，扔掉，倾倒（垃圾或废料等）；倾销   <strong>bump  lump</strong><br>n. 垃圾场</li><li>conquer<br>vt. 战胜，破除，克服（问题，弱点）</li></ol><h3 id="9-3"><a href="#9-3" class="headerlink" title="9.3"></a>9.3</h3><ol><li>crew<br>n. （船上的）全体船员；（飞机上的）全体机组人员等<br>v. 充当船员或机务人员; 配备船员; 配备机务或乘务人员 <strong>cue clue</strong></li><li>prohibition<br>n. 禁止，阻止；禁令，禁律 **prohibit  ban  forbid **</li><li>torture<br>n. 酷刑，拷问；折磨；痛苦，痛苦（或忧虑）的原因<br>vt. 拷打；使痛苦；折磨 </li><li>admiration<br>n. 钦佩，赞美；欣赏，倾慕 <strong>admire</strong></li><li>ease<br>n. 安逸，悠闲；容易，不费力 <strong>easy</strong><br>v. 减轻，舒缓，缓解；逐渐引导某人熟悉（某活动）</li><li>manufacture<br>v. 生产，制造<br>n. （大规模）生产，制造；制造业  <strong>factory</strong></li><li>substantial<br>adj. 大量的；相当程度的；实质的；基本上的，大体上的；很重要的；很有价值的 </li></ol><p><strong>considerable   essential</strong><br>8. peer<br>n. 同辈；同龄人；同等地位的人，（才能）相匹敌的人；（英国）贵族<br>v. 凝视，盯着看，费力地看<br>9. delegate<br>v. 把（任务，责任）委托（或委派、授权）给他人（尤指下属）<br>n. 代表；会议代表<br>10. infectious<br>adj. （疾病，致病生物体）传染的，有传染性的  <strong>infect</strong><br>11. overseas<br>adj. 来自（或去、有关）国外的（尤指海外）；外国的；海外的<br>adv. 在（或向）国外（尤指海外）</p><h3 id="9-4"><a href="#9-4" class="headerlink" title="9.4"></a>9.4</h3><ol><li>commercial<br>adj. 贸易的；商业的；商务的   <strong>commerce</strong><br>n. 电视广告；电台广告</li><li>preference<br>n. 喜好；偏好；更加喜爱；偏爱；偏爱的事物</li><li>prompt<br>adj. 迅速的，立刻的；敏捷的<br>v. （事件，事实）引起，激起；促使（某人）采取行动；提示<br>n. 鼓励，催促；提示；【计算机】提示信息；【给演员的】提词，提白</li><li>lobby<br>n. （尤指公共建筑入口处的）大堂，穿堂，休息室；游说团体；游说 <strong>hobby</strong><br>v. （就某一问题）进行游说活动</li><li>sticky<br>adj. 黏性的；（天气）湿热的  <strong>stick</strong></li><li>prejudice<br>n. 偏见；歧视，反感；损害，侵害 <strong>precaution</strong><br>v. 使存有偏见；伤害，损害</li><li>comprise<br>v. 组成，构成；包含   <strong>compose  consist  constitute</strong></li><li>episode<br>n. （连载小说中的）一节；（广播或电视连续剧的）一集；一段经历；片段，插曲；（某疾病的）发作期</li><li>originate<br>v. 发源；来自；发端于；创立；发明</li><li>confine<br>v. 限制；使局限于；监禁</li><li>shed<br>vt. 脱落，脱去；<strong>抛弃</strong>（不合意、多余或过时的东西）；取消；射出，发出（光）；（phrase. shed tears）<strong>流泪；哭</strong><br>n. 小屋；棚式建筑；货棚；牲口棚；工作棚</li></ol><h3 id="9-5"><a href="#9-5" class="headerlink" title="9.5"></a>9.5</h3><ol><li>precaution<br> n.预备、防备、警惕<br> pre之前的，caution谨慎，precaution 预防</li><li>execute<br> v. 处决；执行；实施（计划，命令，行动过程）；完成 <strong>executive</strong></li><li>compromise<br> n. 折中状态；折中（办法）；妥协<br> v. 妥协，让步；降低标准</li><li>establish<br> v. 设立；建立；制定；证实；查明；确定；安置；安顿；使开业；使立足；使稳定</li><li>harmonious<br> adj. 和睦的，一致的；和谐的 <strong>harmony harmonyos</strong></li><li>liberate<br> vt. 解放（思想），使摆脱思想（或行为）上的束缚</li><li>preservation<br> n. 保存；保护，维护；保养；维持 <strong>preserve</strong></li><li>calculation<br> n. 评估；估定；估计；计算 <strong>speculate  estimate  appraise  evaluate</strong></li><li>instruct<br> v. 教，指导；指示；命令，吩咐  <strong>instructor</strong></li><li>grave<br>n.坟墓<br>adj.严峻的、重大的</li><li>impose<br>v.把…强加于、要求履行(义务)、征税</li><li>dean<br>n.教务长、系主任</li><li>penalty<br>n.不利后果、处罚、罚金</li></ol><h3 id="9-6"><a href="#9-6" class="headerlink" title="9.6"></a>9.6</h3><ol><li>orbit<br>n. 轨道，轨迹<br>v. 绕轨道而行</li><li>novelty<br>n. 新奇；新奇性；与众不同；新奇的事物；新鲜事，不同寻常的经历；小装饰</li><li>competition<br>n. 竞赛，比赛；竞争，角逐  <strong>compete</strong></li><li>asset<br>n. （个人或公司的）资产；（有用的或宝贵的）物品；人才</li><li>imply<br>v. 暗示；暗指 <strong>cue hint indicate</strong></li><li>neutral<br>adj. 中立的，中性的</li><li>virtue<br>n. 美德；优点，长处</li><li>prospect<br>n. （成功或发财的）机会，可能性；前途，前景</li></ol><h3 id="9-7"><a href="#9-7" class="headerlink" title="9.7"></a>9.7</h3><ol><li>faculty<br>n. 能力，才能；（大学系、科或学院的）全体教学（或科研）人员</li><li>crucial<br>adj. 决定性的；关键性的；至关重要的</li><li>advertise<br>v. 为（产品、服务或事件）做广告，宣传</li><li>integrity<br>n. 诚实，正直；完整，完好</li><li>recruit<br>vt. 招募（新兵），招聘，招收（员工，支持者）；吸收（新成员）<br>n. 新兵；新成员，新支持者</li><li>alternative<br>adj. （一或多个事物）可选择的；可替代的；非主流的，非传统的<br>n. 替换物; （二者或多者中）选择之一，可能性之一</li><li>assemble<br>v. 使（人或物为共同目的）聚集；召集，调集；装配（机器或物品的）部件  <strong>appointment</strong></li><li>span<br>n. 持续时间；一段时间；全长，距离<br>v. （桥、拱等）横跨，跨越；持续一段时间</li><li>exceed<br>v. （在数量或大小上）超过；超越；超出（限定）<strong>proceed</strong></li><li>insurance<br>n. 保险；保险业  <strong>insure</strong></li><li>exposure<br>n. 暴露；接触；曝光；日晒雨淋；经历  <strong>expose</strong></li></ol><h3 id="9-8"><a href="#9-8" class="headerlink" title="9.8"></a>9.8</h3><ol><li>hostile<br>adj. 怀有敌意的；敌对的</li><li>render<br>v. 致使，造成；给予，提供（服务、帮助等）</li><li>modest<br>adj. 谦虚的， 谦逊的；（数量，等级，水平）适中的，适度的；有限的；朴素的</li><li>confess<br>v. （常指因略感羞愧、窘迫而）勉强承认；忏悔</li><li>strategic<br>adj. 对全局有重要意义的，关键的；战略（上）的</li><li>surgery<br>n. 外科手术；外科；诊所</li><li>moral<br>adj. 道德（上）的；有道德的，品行端正的  <strong>virtue</strong><br>n. 道德；品行；伦理；道德规范</li><li>agreeable<br>adj. 令人愉快的；惬意的</li><li>combat<br>n. 搏斗；打仗；战斗<br>v. 与…战斗，与…斗争；防止；减轻</li><li>bankrupt<br>adj. 破产的；一贫如洗的；缺乏…的<br>n. 破产者<br>v. 使破产</li><li>ancestor<br>n. 祖宗，祖先   <strong>descendant</strong></li><li>dairy<br>adj. 乳制品的；乳品业的<br>n. 牛奶以及乳制品；乳品店；乳品场；乳品公司</li><li>poverty<br>n. 贫穷，贫困</li><li>mission<br>n. 任务；代表团；使命，天职；航天飞行</li><li>charity<br>n. 慈善机构；慈善事业</li><li>interfere<br>v. （未经邀请或没必要）参与，涉入；插手，干涉；扰乱，干扰（过程或活动）（使不能继续或正常进行）</li><li>deceive<br>vt. （某事）使（某人）以错误印象，误导（某人）；欺骗，蒙蔽，行骗</li><li>notify<br>v. （正式）通报，知照，通知，告知</li></ol><h3 id="9-9"><a href="#9-9" class="headerlink" title="9.9"></a>9.9</h3><ol><li>literacy<br>n.识字，有读写能力；（特定领域的）能力（或知识、技能）</li><li>infinite<br>adj. 大量的；极度的；无限的，无穷的；无边的；无法计量（或计算）的，无数的 <strong>finite</strong><br>n. 无限，无尽的事物</li><li>perception<br>n. 观念，看法，印象；感知，感觉；察觉；感知能力；认识能力</li><li>boost<br>vt. 推动，推进；增强<br>n. 提高，增加；推动，激励</li><li>perception<br>n. 观念，看法，印象；感知，感觉；察觉；感知能力；认识能力</li><li>relay<br>v. 转送，转发；播放，转播；转达信息，转告（消息）<br>n. 接力赛；接替者；中继设备</li><li>reserve<br>v. 预订（房间、座位、入场券等）；把…专门留给<br>n. 储备，储量；储备金，准备金；储存物资；保护区</li><li>decisive<br>adj. 决定性的；决断的，果断的</li><li>racial<br>adj. 人种的，种族的；民族的；种族差异引起的，与种族差异有关的</li><li>impression<br>n. （尤指粗浅未多思考的）印象，感想，观感</li><li>prominent<br>adj. 显眼的，显著的；突出的，杰出的；重要的；卓越的，著名的</li><li>apparent<br>adj. 清晰可见的，清晰明了的；明显的；表面上的</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;9-1&quot;&gt;&lt;a href=&quot;#9-1&quot; class=&quot;headerlink&quot; title=&quot;9.1&quot;&gt;&lt;/a&gt;9.1&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;craft&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;n. 工艺，手艺；飞机；宇宙飞船；航天器；技巧；传统或人工的饮食&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="学习" scheme="https://youngsay.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="英语" scheme="https://youngsay.cn/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>《你的第一本哲学书》读书分享</title>
    <link href="https://youngsay.cn/2021/08/20/read-allmeans/"/>
    <id>https://youngsay.cn/2021/08/20/read-allmeans/</id>
    <published>2021-08-20T12:49:01.000Z</published>
    <updated>2021-08-20T10:20:50.694Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>《你的第一本哲学书》是本很精简的哲学入门书，没有专业术语，没有各种学派，直接面向最基本的哲学问题。看译后记发现个有趣的事：原著书名是“What does it all mean”，译者综合考虑译为《哲学冒险》，结果出版社考虑对读者的吸引力，起名为“你的第一本哲学书”😂</p><blockquote><p>我们每天都使用一些平常的概念，却从未加以反思；而哲学的主要工作就是去询问和理解这些概念。 你要探究的概念越是基础，可以帮助你的工具也就越是匮乏。</p></blockquote><p>以我的能力读这本书还是很费力，作者谈及的都是一些习以为常的事情，都是在平时没有思考过而默认的概念。</p><h3 id="自由意志"><a href="#自由意志" class="headerlink" title="自由意志"></a>自由意志</h3><p>假设在学习和娱乐面前，我选择了娱乐。期末考试要来了，我后悔地说道：“我本可以好好学习”。</p><p>“我本可以好好学习”这句话什么意思？在同样的时间、环境、条件下，我仍然可以选择学习。人们在外在条件一模一样的情况下，并不需要发生任何不同的事情作为前提，就能够做某些他们实际上并没有做的事情。这意味着什么呢？</p><p>这说明在选择娱乐之前，学习仍是开放的可能性，选择学习还是娱乐是由我的自由意志决定的，不由外界决定。</p><p>不过，决定论认为我们做什么事情都是事先决定好的，永远也不可能做实际上所没有做的事。</p><blockquote><p>世界上所发生的一切事情都是被自然法则所主宰的，就好像行星的运动被自然法则所主宰一样，一个行为的诸多条件正是通过这些自然法则的安排，才能够决定这个行为，并且排除掉其他一切可能性。</p></blockquote><p>如果真是这样，那很可怕。当我想学习还是娱乐时，我的选择已经被决定，娱乐还是学习这一想法只不过是事先被决定的结果在我的意识中出现的过程。在我出生之前，我这一时刻选择娱乐的决定已经被决定，我的选择是直接被前一刻的情境所决定的，而前一刻的情境又是被再往前一刻的情境所决定的，这样可以无穷追溯下去。</p><p>如果真是这样，”我本可以好好学习“这句话毫无意义。这都是被决定好的。我不能责备自己没有好好学习，更不能决定罪犯，惩罚坏人便没有意义。因为一个人做了他绝不可能不做的事而去惩罚他，这是没有意义的。</p><p>如果决定论是真的，社会秩序将荡然无存，人类的一切行为也没有了意义。决定论是否正确，我们不得而知。</p><p>假设决定论是假的，”我本可以好好学习“这句话又是什么意思？你相信是你通过做出选择，决定了自己将要做什么。这一选择并非事先被决定，但是也不是自己发生的。你选择了它，并且你也能够选择别的。但是这又意味着什么？</p><p>一些人认为，这个问题没有答案。自由行为是世界上的一种基本特性，不能够再加以分解。某件事情不需要原因而发生，和一个行为不需要原因而被人做出，二者间有着微妙的不同。</p><p>即使我们的选择并非事先已被决定，我们以何种方式能够做我们实际上所没有做的事情，仍然很难理解。两种选择在事先皆有可能，但是除非是“我”决定选其中某个，否则我仍然不需要对这种选择负责，正如如果它是被在我之外的原因所决定的，我不需要为此负责一样。如果决定论是正确的，先前的条件就该为我们的行为负责，如果决定论是错误的，就没什么东西要负责了。</p><p>……</p><h3 id="死亡"><a href="#死亡" class="headerlink" title="死亡"></a>死亡</h3><p>人终会死去，我们无法想象死后的样子。</p><p>如果二元论正确，人是由身体和灵魂组成，身体和灵魂时独立的，身体死后灵魂会不会离开身体，依附一个新的身体而存在。即使二元论正确，也可能不存在死后生活，灵魂很可能完全依赖身体。</p><p>如果二元论是错的，就不存在死后生活。</p><p>我们以何种态度面对自己的死亡？如果不存在死后生活，死亡就是一了百了，我们又是什么态度？</p><p>书中写道，必然是一种消极的善或者恶。换句话说，它是一片虚无，如果是好的，那么一定是因为它避免了某种坏事（例如无聊或痛苦），如果是坏的，也一定是因为它失去了某种好事（例如在世时有趣的或愉悦的体验）。</p><p>如果死后就是一了百了，这也许并不可怕。<strong>在我们出生之前的漫长岁月里，世界如常存在，但是却没有我们，对此我们安之若素。那么，想到我们死后就不复存在，这又有什么可怕的呢？</strong></p><h3 id="人生的意义"><a href="#人生的意义" class="headerlink" title="人生的意义"></a>人生的意义</h3><p>我认为，人生不论有无意义，这都毫无意义。无论有无意义，我们照样过着自己的日子。</p><p>但总有人把自己看得很重要，他希望自己的人生整体从外在看，也具有意义。</p><p>许多人活着不只是为了活下去和过得舒适，而是为了满足自己的雄心壮志，付出了种种艰辛努力，其心理动力往往就是来自于一种“重要感”。这种感觉就是：你所做的一切不只是对你来说才重要，在某种更大的意义上来说，它本身就很重要。如果我们放弃了这种重要感，我们就不再能鼓起前进的风帆。如果浮生若梦，万事无常，最终都归于尘土，那么也许我们的雄心壮志不过徒然为荒诞不经的玩笑而已。</p><p>从另一方面来说，<strong>如果我们无可救药地执着于自己的意义，或许也只能安于自身的可笑。也许生命不仅没有意义，而且也是一出荒诞剧？</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;《你的第一本哲学书》是本很精简的哲学入门书，没有专业术语，没有各种学派，直接面向最基本的哲学问题。看译后记发现个有趣的事：原著书名是“Wha</summary>
      
    
    
    
    <category term="日常" scheme="https://youngsay.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="阅读" scheme="https://youngsay.cn/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
</feed>
